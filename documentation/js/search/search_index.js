var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.314,1,2.806]],["body/controllers/AppController.html",[0,2.084,1,4.448,2,1.645,3,0.183,4,0.162,5,0.162,6,4.259,7,0.714,8,1.716,9,6.228,10,1.937,11,0.015,12,1.075,13,4.909,14,1.354,15,1.416,16,0.682,17,0.918,18,4.232,19,4.259,20,0.183,21,0.154,22,2.701,23,1.407,24,1.354,25,4.909,26,0.011,27,0.011]],["title/modules/AppModule.html",[28,1.314,29,2.806]],["body/modules/AppModule.html",[1,3.748,2,1.474,3,0.111,4,0.098,5,0.098,11,0.015,16,0.806,17,0.556,18,4.016,19,2.576,20,0.111,21,0.093,26,0.008,27,0.008,28,1.756,29,5.596,30,1.337,31,1.337,32,1.471,33,1.471,34,1.337,35,2.597,36,1.471,37,2.576,38,2.576,39,2.576,40,4.297,41,4.297,42,4.297,43,4.297,44,4.297,45,4.297,46,4.016,47,4.016,48,2.18,49,1.471,50,1.471,51,2.969,52,2.421,53,2.969,54,2.969,55,2.969,56,1.337,57,1.969,58,4.399,59,2.969,60,2.969,61,1.634,62,0.819,63,2.969,64,1.337,65,1.969,66,2.969,67,2.969,68,2.969,69,2.969,70,2.969,71,2.969,72,1.548]],["title/injectables/AppService.html",[18,2.432,73,0.965]],["body/injectables/AppService.html",[3,0.193,4,0.171,5,0.171,7,0.754,8,1.775,9,6.349,11,0.015,12,1.135,14,1.429,15,1.465,16,0.568,17,0.969,18,3.988,20,0.193,21,0.163,24,1.429,26,0.012,27,0.012,73,1.582,74,2.134,75,4.495,76,5.181,77,5.181,78,5.181]],["title/classes/Auth.html",[21,0.123,79,2.806]],["body/classes/Auth.html",[3,0.221,4,0.196,5,0.196,11,0.014,20,0.221,21,0.186,26,0.013,27,0.013,79,4.991,80,1.573,81,5.141]],["title/injectables/AuthCheckGuard.html",[73,0.965,82,2.806]],["body/injectables/AuthCheckGuard.html",[3,0.263,4,0.127,5,0.127,7,0.56,8,1.46,11,0.015,12,0.842,14,1.061,16,0.664,17,0.719,20,0.197,21,0.166,24,1.46,26,0.01,27,0.01,73,1.488,74,1.584,82,3.785,83,3.001,84,2.197,85,5.25,86,4.591,87,5.25,88,2.981,89,3.845,90,1.146,91,0.876,92,0.636,93,1.061,94,5.25,95,3.336,96,3.001,97,3.336,98,4.591,99,3.336,100,4.13,101,3.001,102,2.241,103,3.001,104,2.75,105,2.55,106,3.785,107,3.084,108,2.75,109,2.55,110,3.336,111,3.336,112,3.336,113,3.001,114,3.336,115,3.336]],["title/controllers/AuthController.html",[0,1.314,116,2.806]],["body/controllers/AuthController.html",[0,0.846,2,0.846,3,0.094,4,0.083,5,0.083,7,0.367,8,1.074,10,1.874,11,0.015,12,1.04,14,1.31,15,0.886,16,0.738,17,0.472,20,0.094,21,0.079,23,1.361,24,1.31,26,0.007,27,0.007,79,1.806,88,1.04,90,1.415,91,1.081,92,1.008,93,1.31,101,1.97,102,1.471,105,1.674,109,3.149,116,2.783,117,2.19,118,1.389,119,4.458,120,3.892,121,3.892,122,3.892,123,2.525,124,2.525,125,3.892,126,3.892,127,2.525,128,2.525,129,5.336,130,3.396,131,2.525,132,4.749,133,4.749,134,5.336,135,2.525,136,2.525,137,3.892,138,3.892,139,2.525,140,2.525,141,2.525,142,3.816,143,3.892,144,2.525,145,2.476,146,1.389,147,2.525,148,2.19,149,2.525,150,2.943,151,2.19,152,2.525,153,2.613,154,2.19,155,2.943,156,2.525,157,3.892,158,3.892,159,2.525,160,1.317,161,2.525,162,1.806,163,2.19,164,2.525,165,2.525,166,1.192,167,2.353,168,2.525,169,1.04,170,2.525,171,0.955,172,1.97,173,1.674,174,1.806,175,2.525,176,2.525,177,2.525,178,2.525,179,1.192,180,1.806,181,2.525,182,1.806,183,2.525,184,1.565,185,2.525,186,1.674,187,2.525,188,1.674,189,2.525,190,2.525,191,2.525,192,1.97,193,2.525,194,2.525,195,2.525,196,2.525,197,2.525,198,2.525,199,2.525,200,2.525,201,2.525]],["title/modules/AuthModule.html",[28,1.314,40,2.602]],["body/modules/AuthModule.html",[2,1.597,3,0.123,4,0.11,5,0.11,11,0.015,16,0.824,17,0.62,20,0.123,21,0.104,26,0.009,27,0.009,28,1.87,30,1.492,31,1.492,32,1.642,33,1.642,34,1.492,35,2.766,36,1.642,40,4.98,47,4.174,48,2.361,49,1.642,50,1.642,52,2.622,61,1.823,62,0.914,88,1.364,91,0.754,102,1.931,116,3.992,150,4.174,151,2.874,153,3.706,154,2.874,169,1.364,202,2.874,203,2.874,204,3.313,205,4.465,206,3.313,207,3.313,208,3.16,209,2.874,210,3.313,211,3.313,212,4.134,213,2.585,214,3.313,215,3.408,216,3.313,217,3.719,218,3.313,219,3.313,220,1.931,221,2.874,222,3.313,223,3.313,224,2.585]],["title/injectables/AuthService.html",[73,0.965,150,2.432]],["body/injectables/AuthService.html",[3,0.15,4,0.133,5,0.133,7,0.586,8,1.506,11,0.015,12,1.196,14,1.11,16,0.762,17,0.753,20,0.15,21,0.126,23,1.154,24,1.11,26,0.01,27,0.01,62,1.11,73,1.343,74,1.658,88,1.658,90,1.627,91,1.243,92,0.904,93,1.506,119,4.11,130,2.879,145,2.848,150,3.385,166,2.577,167,1.995,173,4.11,179,1.9,180,2.879,209,3.493,225,3.493,226,5.461,227,2.879,228,3.465,229,4.026,230,3.905,231,5.461,232,4.026,233,2.099,234,2.495,235,1.523,236,4.261,237,2.879,238,4.026,239,4.026,240,3.493]],["title/classes/Blog.html",[21,0.123,64,1.767]],["body/classes/Blog.html",[3,0.14,4,0.124,5,0.124,7,0.545,10,2.355,11,0.015,12,1.308,15,1.669,16,0.57,20,0.222,21,0.118,26,0.01,27,0.01,62,1.034,64,2.688,72,3.113,80,0.995,84,1.361,92,1.16,169,2.141,171,1.967,179,1.768,235,1.418,241,2.68,242,5.179,243,3.285,244,3.959,245,3.718,246,3.747,247,2.861,248,4.057,249,4.057,250,4.057,251,3.448,252,3.718,253,3.747,254,4.198,255,3.747,256,2.323,257,3.7,258,2.323,259,2.323,260,3.222,261,2.323,262,2.924,263,2.68,264,3.251]],["title/classes/BlogCategory.html",[21,0.123,265,2.602]],["body/classes/BlogCategory.html",[3,0.136,4,0.12,5,0.12,7,0.53,10,2.319,11,0.015,12,1.288,15,1.657,16,0.559,20,0.219,21,0.114,26,0.009,27,0.009,62,1.004,72,3.066,80,0.967,84,1.322,92,1.149,169,2.099,171,1.928,179,1.718,235,1.378,242,5.1,243,3.235,245,3.644,247,2.804,248,3.976,249,3.976,250,3.976,251,3.379,252,3.644,254,4.154,256,2.257,257,3.644,258,2.257,259,2.257,260,3.159,261,2.257,265,3.898,266,3.321,267,4.554,268,2.415,269,4.587,270,3.641,271,3.641,272,3.641,273,2.841,274,2.604,275,3.159]],["title/controllers/BlogCategoryController.html",[0,1.314,276,2.806]],["body/controllers/BlogCategoryController.html",[0,0.964,2,0.964,3,0.107,4,0.095,5,0.095,7,0.419,8,1.186,10,2.409,11,0.015,12,1.338,14,1.684,15,1.588,16,0.626,17,0.538,20,0.107,21,0.09,22,1.584,23,0.825,24,1.684,26,0.008,27,0.008,64,2.569,65,4.248,90,1.7,91,1.299,92,0.944,93,1.574,118,1.584,145,2.241,146,2.831,266,3.34,276,3.074,277,2.246,278,2.241,279,1.331,280,2.35,281,1.77,282,1.77,283,1.77,284,2.497,285,3.97,286,2.497,287,2.497,288,1.185,289,2.505,290,2.497,291,2.527,292,1.185,293,2.505,294,2.497,295,1.185,296,4.525,297,2.505,298,2.497,299,1.677,300,1.677,301,1.677,302,3.537,303,1.784,304,1.185,305,2.241,306,1.185,307,2.497,308,1.677,309,2.878,310,2.878,311,1.677,312,2.878,313,1.677,314,2.878,315,1.677,316,2.878]],["title/modules/BlogCategoryModule.html",[28,1.314,41,2.602]],["body/modules/BlogCategoryModule.html",[2,1.879,3,0.156,4,0.139,5,0.139,11,0.015,16,0.773,17,0.784,20,0.156,21,0.132,26,0.01,27,0.01,28,2.119,30,1.887,31,1.887,32,2.076,33,2.076,34,1.887,35,3.134,36,2.076,41,4.806,48,2.78,49,2.076,50,2.076,52,2.306,61,2.306,62,1.156,64,2.526,65,2.778,91,0.954,169,2.31,220,2.441,265,2.778,266,2.185,274,4.012,276,4.523,302,4.492,303,2.597,317,3.635,318,3.635,319,3.635,320,3.269,321,3.635,322,2.597,323,4.19]],["title/injectables/BlogCategoryService.html",[73,0.965,302,2.432]],["body/injectables/BlogCategoryService.html",[3,0.107,4,0.095,5,0.095,7,0.42,8,1.188,11,0.015,12,1.405,14,1.686,15,1.59,16,0.704,17,0.54,20,0.107,21,0.091,23,0.827,24,1.686,26,0.008,27,0.008,62,0.796,64,1.939,65,4.406,73,1.059,74,1.188,90,1.821,91,1.392,92,1.012,93,1.686,166,2.033,167,1.43,228,2.98,233,1.505,235,1.092,265,1.914,266,3.465,273,2.252,279,1.334,280,2.353,281,1.774,282,1.774,283,1.774,284,3.737,285,3.974,288,1.774,291,2.254,292,1.774,295,1.774,296,4.529,302,2.67,304,1.188,305,2.246,306,1.188,321,2.504,322,1.789,324,2.252,325,2.886,326,2.504,327,4.307,328,2.886,329,2.886,330,2.886,331,2.886,332,2.886,333,2.886,334,2.886,335,2.886,336,2.886,337,2.886,338,2.886]],["title/controllers/BlogController.html",[0,1.314,339,2.806]],["body/controllers/BlogController.html",[0,1.012,2,1.012,3,0.113,4,0.1,5,0.1,7,0.44,8,1.229,10,2.459,11,0.015,12,1.365,14,1.719,15,1.609,16,0.641,17,0.565,20,0.113,21,0.095,22,1.663,23,0.866,24,1.719,26,0.008,27,0.008,64,1.361,90,1.741,91,1.331,92,0.967,93,1.612,118,1.663,145,2.324,146,2.913,279,1.38,280,2.407,281,1.835,282,1.835,283,1.835,288,1.244,289,2.597,291,2.573,292,1.244,293,2.597,295,1.244,297,2.597,299,1.761,300,1.761,301,1.761,304,1.244,306,1.244,307,2.621,308,1.761,311,1.761,313,1.761,315,1.761,339,3.187,340,2.621,341,2.621,342,4.042,343,3.021,344,3.021,345,3.021,346,3.021,347,4.59,348,3.021,349,3.622,350,2.621,351,3.477,352,3.021,353,3.021,354,3.021,355,3.021,356,3.021]],["title/modules/BlogModule.html",[28,1.314,42,2.602]],["body/modules/BlogModule.html",[2,1.905,3,0.159,4,0.141,5,0.141,11,0.015,16,0.778,17,0.8,20,0.159,21,0.134,26,0.01,27,0.01,28,2.141,30,1.926,31,1.926,32,2.119,33,2.119,34,1.926,35,3.166,36,2.119,42,4.834,48,2.818,49,2.119,50,2.119,52,2.353,61,2.353,62,1.18,64,1.926,91,0.974,169,2.342,220,2.492,263,4.067,339,4.57,349,4.519,350,3.71,357,3.71,358,3.71,359,4.277,360,4.277,361,3.71,362,4.277]],["title/injectables/BlogService.html",[73,0.965,349,2.432]],["body/injectables/BlogService.html",[3,0.112,4,0.1,5,0.1,7,0.438,8,1.227,11,0.015,12,1.427,14,1.717,15,1.608,16,0.715,17,0.564,20,0.112,21,0.095,23,0.864,24,1.717,26,0.008,27,0.008,62,0.831,64,1.357,73,1.093,74,1.241,90,1.854,91,1.417,92,1.03,93,1.717,166,2.098,167,1.493,184,1.867,228,3.043,233,1.571,235,1.14,262,2.351,279,1.377,280,2.403,281,1.831,282,1.831,283,1.831,288,1.831,291,2.302,292,1.831,295,1.831,304,1.241,306,1.241,341,3.858,342,4.037,347,4.586,349,2.756,351,3.47,361,2.614,363,2.614,364,3.013,365,3.013,366,4.446,367,3.013,368,3.013,369,3.013,370,3.013,371,3.013,372,3.013,373,3.013,374,3.013,375,3.013,376,3.013,377,3.013]],["title/classes/Category.html",[21,0.123,278,2.046]],["body/classes/Category.html",[3,0.166,4,0.148,5,0.148,7,0.649,10,1.76,11,0.015,12,0.977,15,1.332,16,0.642,20,0.243,21,0.14,26,0.011,27,0.011,62,1.231,72,3.402,80,1.185,84,1.62,92,0.968,169,2.409,171,2.213,179,2.106,235,1.688,254,4.044,256,2.766,257,4.044,258,2.766,259,2.766,260,3.625,261,2.766,269,5.091,278,3.402,378,3.191,379,4.462,380,3.482,381,3.191,382,3.871]],["title/controllers/CategoryController.html",[0,1.314,383,2.806]],["body/controllers/CategoryController.html",[0,1.046,2,1.046,3,0.116,4,0.103,5,0.103,7,0.454,8,1.259,10,2.492,11,0.015,12,1.384,14,1.742,16,0.651,17,0.584,20,0.116,21,0.098,22,1.718,23,0.895,24,1.742,26,0.008,27,0.008,90,1.769,91,1.352,92,0.982,93,1.638,118,1.718,145,2.38,146,2.969,278,1.628,279,1.414,280,2.445,281,1.88,282,1.88,283,1.88,288,1.286,289,2.66,291,2.603,292,1.286,293,2.66,295,1.286,297,2.66,299,1.819,300,1.819,301,1.819,303,1.935,304,1.286,305,2.38,306,1.286,308,1.819,311,1.819,313,1.819,315,1.819,383,3.265,384,2.709,385,2.709,386,4.089,387,3.122,388,3.122,389,3.122,390,3.122,391,4.633,392,3.122,393,3.345,394,3.122,395,3.122,396,3.122,397,3.122,398,3.122,399,3.122]],["title/modules/CategoryModule.html",[28,1.314,43,2.602]],["body/modules/CategoryModule.html",[2,1.9,3,0.159,4,0.141,5,0.141,11,0.015,16,0.777,17,0.797,20,0.159,21,0.134,26,0.01,27,0.01,28,2.136,30,1.918,31,1.918,32,2.11,33,2.11,34,1.918,35,3.16,36,2.11,43,4.829,48,2.81,49,2.11,50,2.11,52,2.344,61,2.344,62,1.175,91,0.97,169,1.754,220,2.482,278,2.221,303,2.64,320,3.323,381,4.056,383,4.56,393,4.513,400,3.695,401,3.695,402,4.259,403,3.695,404,4.259]],["title/injectables/CategoryService.html",[73,0.965,393,2.432]],["body/injectables/CategoryService.html",[3,0.114,4,0.101,5,0.101,7,0.446,8,1.243,11,0.015,12,1.436,14,1.729,15,1.615,16,0.719,17,0.574,20,0.114,21,0.096,23,0.879,24,1.729,26,0.008,27,0.008,62,0.846,73,1.108,74,1.263,90,1.868,91,1.428,92,1.038,93,1.729,166,2.126,167,1.519,228,3.069,233,1.599,235,1.16,278,1.599,279,1.395,280,2.424,281,1.855,282,1.855,283,1.855,288,1.855,291,2.107,292,1.855,295,1.855,304,1.263,305,2.349,306,1.263,380,2.393,385,3.908,386,3.31,391,4.609,393,2.792,403,2.66,405,2.66,406,3.066,407,3.066,408,4.505,409,3.066,410,3.066,411,3.066,412,3.066,413,3.066,414,3.066,415,3.066,416,3.066,417,3.066,418,3.066,419,3.066]],["title/classes/CreateBlogCategoryDto.html",[21,0.123,285,2.432]],["body/classes/CreateBlogCategoryDto.html",[3,0.217,4,0.193,5,0.193,11,0.013,20,0.217,21,0.183,26,0.013,27,0.013,64,2.623,80,1.547,266,3.038,285,4.282,420,4.546,421,3.395]],["title/classes/CreateBlogDto.html",[21,0.123,342,2.432]],["body/classes/CreateBlogDto.html",[3,0.219,4,0.195,5,0.195,11,0.014,20,0.219,21,0.185,26,0.013,27,0.013,80,1.564,342,4.311,422,5.112,423,4.598]],["title/classes/CreateCategoryDto.html",[21,0.123,386,2.432]],["body/classes/CreateCategoryDto.html",[3,0.219,4,0.195,5,0.195,11,0.014,20,0.219,21,0.185,26,0.013,27,0.013,80,1.564,386,4.311,421,3.434,424,5.112]],["title/classes/CreateFaqCategoryDto.html",[21,0.123,425,2.432]],["body/classes/CreateFaqCategoryDto.html",[3,0.217,4,0.193,5,0.193,11,0.013,20,0.217,21,0.183,26,0.013,27,0.013,56,2.623,80,1.547,420,4.546,421,3.395,425,4.282,426,2.749]],["title/classes/CreateFaqDto.html",[21,0.123,427,2.432]],["body/classes/CreateFaqDto.html",[3,0.219,4,0.195,5,0.195,11,0.014,20,0.219,21,0.185,26,0.013,27,0.013,80,1.564,427,4.311,428,5.112,429,4.598]],["title/classes/CreateQuestionDto.html",[21,0.123,430,2.432]],["body/classes/CreateQuestionDto.html",[3,0.219,4,0.195,5,0.195,11,0.014,20,0.219,21,0.185,26,0.013,27,0.013,80,1.564,430,4.311,431,5.112,432,4.598]],["title/classes/CreateUserDto.html",[21,0.123,433,2.432]],["body/classes/CreateUserDto.html",[3,0.219,4,0.195,5,0.195,11,0.014,20,0.219,21,0.185,26,0.013,27,0.013,80,1.564,433,4.311,434,5.112,435,4.598]],["title/classes/Faq.html",[21,0.123,56,1.767]],["body/classes/Faq.html",[3,0.131,4,0.117,5,0.117,7,0.514,10,2.28,11,0.015,12,1.266,15,1.43,16,0.727,20,0.215,21,0.157,26,0.009,27,0.009,56,2.603,62,0.973,72,3.455,80,0.937,84,1.281,92,1.17,169,2.38,171,1.886,179,1.665,235,1.335,245,2.524,254,4.106,256,2.187,257,3.583,258,2.187,259,2.187,260,3.09,261,2.187,278,3.275,322,2.187,426,1.665,436,2.524,437,5.78,438,3.583,439,3.529,440,3.66,441,3.062,442,4.985,443,3.529,444,3.529,445,3.062,446,3.529,447,3.529,448,2.187,449,3.529,450,2.754,451,2.754,452,3.529,453,2.754,454,2.754,455,2.524,456,3.062]],["title/classes/FaqCategory.html",[21,0.123,440,2.286]],["body/classes/FaqCategory.html",[3,0.149,4,0.132,5,0.132,7,0.581,10,2.143,11,0.015,12,1.19,15,1.508,16,0.596,20,0.23,21,0.125,26,0.01,27,0.01,62,1.102,72,3.813,80,1.06,84,1.45,92,1.021,169,2.237,171,2.055,174,4.414,179,1.885,235,1.511,254,3.826,256,2.476,257,3.826,258,2.476,259,2.476,260,3.367,261,2.476,268,2.649,269,4.817,426,2.913,440,3.597,445,3.465,448,3.826,451,3.117,457,3.994,458,3.994,459,3.994,460,3.994,461,3.117,462,2.649,463,3.465]],["title/controllers/FaqCategoryController.html",[0,1.314,464,2.806]],["body/controllers/FaqCategoryController.html",[0,0.995,2,0.995,3,0.111,4,0.098,5,0.098,7,0.432,8,1.213,10,2.441,11,0.015,12,1.355,14,1.707,16,0.636,17,0.556,20,0.111,21,0.093,22,1.634,23,0.851,24,1.707,26,0.008,27,0.008,56,2.609,57,4.297,90,1.726,91,1.319,92,0.959,93,1.598,118,1.634,145,2.294,146,2.884,277,2.317,278,2.294,279,1.362,280,2.386,281,1.812,282,1.812,283,1.812,286,2.576,287,2.576,288,1.223,289,2.563,290,2.576,291,2.556,292,1.223,293,2.563,294,2.576,295,1.223,297,2.563,298,2.576,299,1.73,300,1.73,301,1.73,303,1.84,304,1.223,305,2.294,306,1.223,308,1.73,311,1.73,313,1.73,315,1.73,425,4.016,426,3.058,464,3.146,465,2.576,466,4.567,467,3.248,468,2.576,469,2.969,470,2.969,471,2.969,472,2.969,473,2.969]],["title/modules/FaqCategoryModule.html",[28,1.314,44,2.602]],["body/modules/FaqCategoryModule.html",[2,1.874,3,0.155,4,0.138,5,0.138,11,0.015,16,0.772,17,0.781,20,0.155,21,0.131,26,0.01,27,0.01,28,2.114,30,1.879,31,1.879,32,2.068,33,2.068,34,1.879,35,3.127,36,2.068,44,4.8,48,2.772,49,2.068,50,2.068,52,2.296,56,2.519,57,2.767,61,2.296,62,1.151,91,0.95,169,1.718,220,2.432,303,2.586,319,3.62,320,3.256,322,2.586,426,1.969,440,2.432,453,3.256,462,3.71,464,4.514,467,4.487,474,3.62,475,3.62,476,3.62]],["title/injectables/FaqCategoryService.html",[73,0.965,467,2.432]],["body/injectables/FaqCategoryService.html",[3,0.102,4,0.09,5,0.09,7,0.398,8,1.14,11,0.015,12,1.429,14,1.8,15,1.596,16,0.689,17,0.511,20,0.102,21,0.086,23,0.783,24,1.733,26,0.008,27,0.008,56,1.862,57,4.455,62,0.754,73,1.017,74,1.125,90,1.779,91,1.36,92,0.988,93,1.647,166,1.951,167,1.354,184,1.694,192,2.132,228,2.899,233,1.425,235,1.034,279,1.28,280,2.29,281,1.703,282,1.703,283,1.703,288,1.703,291,2.193,292,1.703,295,1.703,304,1.125,305,2.156,306,1.125,322,1.694,324,2.132,326,2.371,425,3.894,426,3.17,440,1.592,461,2.132,465,3.587,466,4.455,467,2.562,476,2.371,477,4.823,478,2.733,479,4.134,480,2.733,481,2.733,482,2.733,483,2.733,484,2.733,485,2.733,486,2.733,487,2.733,488,2.733,489,2.132,490,2.371,491,2.733,492,2.733,493,2.733]],["title/controllers/FaqController.html",[0,1.314,494,2.806]],["body/controllers/FaqController.html",[0,1.046,2,1.046,3,0.116,4,0.103,5,0.103,7,0.454,8,1.259,10,2.492,11,0.015,12,1.384,14,1.742,16,0.651,17,0.584,20,0.116,21,0.098,22,1.718,23,0.895,24,1.742,26,0.008,27,0.008,56,1.406,90,1.769,91,1.352,92,0.982,93,1.638,118,1.718,145,2.38,146,2.969,279,1.414,280,2.445,281,1.88,282,1.88,283,1.88,288,1.286,289,2.66,291,2.603,292,1.286,293,2.66,295,1.286,297,2.66,299,1.819,300,1.819,301,1.819,304,1.286,306,1.286,308,1.819,311,1.819,313,1.819,315,1.819,427,4.089,468,2.709,494,3.265,495,2.709,496,2.709,497,3.122,498,3.122,499,3.122,500,3.122,501,4.633,502,3.122,503,3.345,504,2.709,505,3.562,506,3.122,507,3.122,508,3.122,509,3.122,510,3.122]],["title/modules/FaqModule.html",[28,1.314,45,2.602]],["body/modules/FaqModule.html",[2,1.849,3,0.152,4,0.135,5,0.135,11,0.015,16,0.79,17,0.765,20,0.152,21,0.128,26,0.01,27,0.01,28,2.093,30,1.842,31,1.842,32,2.027,33,2.027,34,1.842,35,3.096,36,2.027,45,4.772,48,2.735,49,2.027,50,2.027,52,2.251,56,1.842,61,2.251,62,1.128,91,1.257,169,2.273,220,2.383,322,2.535,426,1.93,440,2.383,448,2.535,453,3.191,455,3.947,462,3.66,494,4.468,503,4.461,504,3.548,511,3.548,512,3.548,513,4.09,514,4.09,515,3.548,516,4.09]],["title/injectables/FaqService.html",[73,0.965,503,2.432]],["body/injectables/FaqService.html",[3,0.113,4,0.1,5,0.1,7,0.442,8,1.235,11,0.015,12,1.431,14,1.723,15,1.611,16,0.717,17,0.569,20,0.113,21,0.095,23,0.871,24,1.723,26,0.008,27,0.008,56,1.369,62,0.838,73,1.101,74,1.252,90,1.861,91,1.422,92,1.034,93,1.723,166,2.112,167,1.506,184,1.884,228,3.056,233,1.585,235,1.15,279,1.386,280,2.413,281,1.843,282,1.843,283,1.843,288,1.843,291,2.312,292,1.843,295,1.843,304,1.252,306,1.252,427,3.293,454,2.372,496,3.883,501,4.598,503,2.774,505,3.492,515,2.637,517,2.637,518,3.039,519,3.039,520,4.475,521,3.039,522,3.039,523,3.039,524,3.039,525,3.039,526,3.039,527,3.039,528,3.039,529,3.039,530,3.039,531,3.039]],["title/interfaces/IErrorBody.html",[532,1.616,533,2.432]],["body/interfaces/IErrorBody.html",[3,0.121,4,0.108,5,0.108,7,0.475,11,0.015,15,1.782,20,0.249,23,2.243,26,0.009,27,0.009,92,1.26,93,1.95,171,1.782,243,3.334,244,4.018,247,3.89,532,2.495,533,2.92,534,1.9,535,2.021,536,4.333,537,4.333,538,4.688,539,2.021,540,2.332,541,2.332,542,2.332,543,2.332,544,2.332,545,2.332,546,2.332,547,2.332,548,2.332,549,2.745,550,2.162,551,3.369,552,2.745,553,2.332,554,2.021]],["title/interfaces/ItemsBody.html",[532,1.616,552,2.286]],["body/interfaces/ItemsBody.html",[3,0.141,4,0.125,5,0.125,7,0.549,11,0.015,15,1.735,20,0.262,23,2.283,26,0.01,27,0.01,92,1.163,171,1.977,243,2.077,244,2.503,247,3.866,532,2.664,533,2.34,534,2.2,535,2.34,536,2.7,537,2.7,538,3.974,539,2.34,540,2.7,541,2.7,542,2.7,543,2.7,544,2.7,545,2.7,546,2.7,547,2.7,548,2.7,549,3.045,550,2.503,551,4.626,552,3.492,553,4.626,554,2.34]],["title/classes/JwtStorage.html",[21,0.123,555,2.806]],["body/classes/JwtStorage.html",[3,0.1,4,0.089,5,0.089,7,0.391,8,1.127,11,0.015,12,1.299,14,1.127,15,1.477,16,0.685,17,0.503,20,0.1,21,0.085,23,2.001,24,1.127,26,0.007,27,0.007,62,0.742,80,0.714,88,1.682,90,1.471,91,1.125,92,1.033,93,1.362,106,1.924,107,1.567,109,2.709,119,4.14,130,1.924,148,2.334,155,3.061,166,1.928,167,3.313,171,1.545,179,1.269,180,1.924,212,5.629,213,2.099,227,1.924,228,2.876,230,2.921,233,1.403,234,1.667,235,1.018,237,1.924,251,2.709,291,1.061,532,1.108,555,2.921,556,2.334,557,3.544,558,6.244,559,4.939,560,4.939,561,3.544,562,4.939,563,3.544,564,4.085,565,3.544,566,4.085,567,4.085,568,2.69,569,4.085,570,4.085,571,2.69,572,4.085,573,2.69,574,3.187,575,2.334,576,2.69,577,4.085,578,2.69,579,2.69,580,2.69,581,2.69,582,2.69,583,2.69,584,2.334,585,2.69,586,2.69,587,2.69,588,2.69,589,2.69,590,2.334,591,2.69]],["title/injectables/JwtStrategy.html",[73,0.965,205,2.602]],["body/injectables/JwtStrategy.html",[3,0.155,4,0.137,5,0.137,7,0.605,8,1.539,11,0.015,12,1.222,14,1.146,16,0.691,17,0.778,20,0.155,21,0.131,24,1.146,26,0.01,27,0.01,72,2.167,73,1.372,74,1.711,84,2.026,90,1.238,91,0.946,92,0.688,93,1.146,102,2.422,119,4.177,130,2.972,166,2.972,182,2.972,184,2.576,186,2.756,188,2.756,205,3.7,224,3.243,584,3.605,592,3.605,593,4.84,594,4.84,595,4.156,596,5.579,597,4.156,598,4.156,599,3.605,600,4.156,601,3.605,602,3.243,603,3.605,604,4.156,605,4.156,606,4.156,607,4.156,608,4.156,609,4.156,610,4.156,611,4.156]],["title/classes/LocalStrategy.html",[21,0.123,215,2.806]],["body/classes/LocalStrategy.html",[3,0.128,4,0.114,5,0.114,7,0.502,8,1.352,11,0.015,12,1.074,14,0.951,15,1.554,16,0.77,17,0.645,20,0.128,21,0.108,23,0.988,24,0.951,26,0.009,27,0.009,62,0.951,80,0.915,84,1.78,88,2.559,90,1.46,91,1.116,92,0.811,93,1.352,100,2.689,102,2.008,106,3.506,107,2.856,119,3.783,166,2.313,167,1.708,172,3.825,173,4.121,179,1.626,180,3.506,182,3.506,215,3.506,227,2.465,228,3.24,230,3.506,233,1.797,234,2.136,235,1.304,236,3.825,237,2.465,574,3.825,575,2.99,590,2.99,593,4.253,594,4.253,599,2.99,601,2.99,602,2.689,603,2.99,612,2.99,613,3.446,614,4.902,615,3.446,616,2.99,617,3.446,618,4.902,619,4.902,620,3.446,621,3.446]],["title/interfaces/PaginationMetaInterface.html",[532,1.616,539,2.432]],["body/interfaces/PaginationMetaInterface.html",[3,0.114,4,0.101,5,0.101,7,0.445,11,0.015,15,1.767,20,0.244,23,2.225,26,0.008,27,0.008,92,1.246,93,1.916,171,1.701,243,1.682,244,2.027,247,4.203,532,2.42,533,1.895,534,1.782,535,1.895,536,2.186,537,2.186,538,3.535,539,2.786,540,4.203,541,4.203,542,4.203,543,4.203,544,4.203,545,4.203,546,4.203,547,4.203,548,4.203,549,2.619,550,2.027,551,3.215,552,2.619,553,2.186,554,1.895]],["title/classes/Question.html",[21,0.123,438,2.432]],["body/classes/Question.html",[3,0.221,4,0.196,5,0.196,11,0.014,20,0.221,21,0.186,26,0.013,27,0.013,80,1.573,438,4.326,622,5.141]],["title/controllers/QuestionController.html",[0,1.314,623,2.806]],["body/controllers/QuestionController.html",[0,1.046,2,1.046,3,0.116,4,0.103,5,0.103,7,0.454,8,1.259,10,2.492,11,0.015,12,1.384,14,1.742,16,0.651,17,0.584,20,0.116,21,0.098,22,1.718,23,0.895,24,1.742,26,0.008,27,0.008,90,1.769,91,1.352,92,0.982,93,1.638,118,1.718,145,2.38,146,2.969,279,1.414,280,2.445,281,1.88,282,1.88,283,1.88,288,1.286,289,2.66,291,2.603,292,1.286,293,2.66,295,1.286,297,2.66,299,1.819,300,1.819,301,1.819,304,1.286,306,1.286,308,1.819,311,1.819,313,1.819,315,1.819,430,4.089,438,1.935,623,3.265,624,2.709,625,2.709,626,3.122,627,3.122,628,3.122,629,3.122,630,4.633,631,3.122,632,3.345,633,2.709,634,3.562,635,3.122,636,3.122,637,3.122,638,3.122,639,3.122,640,3.122]],["title/modules/QuestionModule.html",[28,1.314,46,2.432]],["body/modules/QuestionModule.html",[2,1.959,3,0.166,4,0.148,5,0.148,11,0.014,16,0.716,17,0.835,20,0.166,21,0.14,26,0.011,27,0.011,28,2.186,30,2.009,31,2.009,32,2.211,33,2.211,34,2.009,35,3.233,36,3.233,46,4.66,48,2.898,49,2.211,50,2.211,623,4.666,632,4.892,633,3.871,641,3.871,642,3.871,643,3.871,644,4.462,645,4.462]],["title/injectables/QuestionService.html",[73,0.965,632,2.432]],["body/injectables/QuestionService.html",[3,0.121,4,0.107,5,0.107,7,0.473,8,1.297,11,0.015,12,1.406,14,1.903,15,1.461,16,0.606,17,0.608,20,0.121,21,0.102,24,1.77,26,0.009,27,0.009,73,1.156,74,1.339,90,1.802,91,1.378,92,1.001,93,1.669,107,1.894,247,3.961,279,1.456,280,2.491,281,1.936,282,1.936,283,1.936,288,1.936,291,2.639,292,1.936,295,1.936,304,1.339,306,1.339,430,3.978,438,3.978,489,5.008,625,4.078,630,4.575,632,2.913,634,3.668,646,2.82,647,3.25,648,3.25,649,3.25,650,3.25,651,3.25,652,3.25,653,3.25,654,3.25]],["title/interfaces/ResourceBody.html",[532,1.616,549,2.286]],["body/interfaces/ResourceBody.html",[3,0.141,4,0.125,5,0.125,7,0.549,11,0.015,15,1.735,20,0.262,23,2.283,26,0.01,27,0.01,92,1.163,171,1.977,243,2.077,244,2.503,247,3.866,532,2.664,533,2.34,534,2.2,535,2.34,536,2.7,537,2.7,538,3.974,539,2.34,540,2.7,541,2.7,542,2.7,543,2.7,544,2.7,545,2.7,546,2.7,547,2.7,548,2.7,549,3.492,550,4.289,551,4.626,552,3.045,553,2.7,554,2.34]],["title/injectables/ResponseTransformInterceptor.html",[73,0.965,655,3.061]],["body/injectables/ResponseTransformInterceptor.html",[3,0.118,4,0.105,5,0.105,7,0.461,8,1.273,11,0.015,12,0.694,14,0.875,15,0.722,16,0.728,17,0.593,20,0.172,21,0.1,24,1.83,26,0.008,27,0.008,72,1.653,73,1.135,74,1.306,90,0.944,91,0.722,92,0.525,93,0.875,96,4.666,103,4.248,104,2.267,107,1.847,108,2.267,113,2.474,162,3.301,163,2.75,179,2.569,441,4.005,550,3.965,554,2.861,557,2.75,655,3.602,656,3.301,657,2.267,658,5.443,659,3.17,660,5.443,661,5.979,662,3.17,663,4.616,664,4.616,665,3.17,666,3.17,667,3.17,668,2.474,669,3.17,670,2.75,671,2.474,672,2.75,673,3.602,674,2.474,675,3.17,676,3.17,677,3.17,678,3.17,679,3.17,680,5.443,681,3.17,682,3.17,683,4.616,684,3.17,685,3.17,686,3.17,687,3.17,688,3.17,689,3.17,690,3.17,691,3.17]],["title/interfaces/SignUpDTO.html",[142,2.806,532,1.616]],["body/interfaces/SignUpDTO.html",[3,0.179,4,0.159,5,0.159,7,0.701,11,0.014,15,1.817,20,0.179,26,0.011,27,0.011,92,1.18,142,4.395,171,2.325,172,5.563,173,4.727,186,4.727,188,4.727,532,1.984,534,2.807,692,4.179]],["title/injectables/TokenGuard.html",[73,0.965,105,2.602]],["body/injectables/TokenGuard.html",[3,0.263,4,0.127,5,0.127,7,0.56,8,1.46,11,0.015,12,0.842,14,1.061,16,0.664,17,0.719,20,0.197,21,0.166,24,1.46,26,0.01,27,0.01,73,1.488,74,1.584,82,2.75,83,3.001,84,2.197,85,5.25,86,4.591,87,5.25,88,2.981,90,1.146,91,0.876,92,0.636,93,1.061,94,5.25,95,3.336,96,3.001,97,3.336,98,4.591,99,3.336,100,4.13,101,3.001,102,2.241,103,3.001,104,2.75,105,3.51,106,3.785,107,3.084,108,2.75,109,2.55,110,3.336,111,3.336,112,3.336,113,3.001,114,3.336,115,3.336,693,3.845]],["title/interfaces/TokenStorage.html",[155,2.432,532,1.616]],["body/interfaces/TokenStorage.html",[3,0.189,4,0.168,5,0.168,7,0.739,11,0.014,15,1.156,20,0.189,23,1.821,26,0.012,27,0.012,88,2.091,92,1.052,109,3.368,155,3.939,171,2.404,532,2.091,534,2.959,561,6.305,563,6.305,574,4.958,673,5.671,694,4.406]],["title/classes/UpdateBlogCategoryDto.html",[21,0.123,296,2.602]],["body/classes/UpdateBlogCategoryDto.html",[3,0.199,4,0.177,5,0.177,11,0.014,16,0.719,20,0.199,21,0.168,26,0.012,27,0.012,64,2.952,80,1.418,84,2.381,160,2.786,266,2.786,279,1.654,285,3.311,296,4.348,305,2.786,421,3.113,695,4.169,696,6.557,697,3.113]],["title/classes/UpdateBlogDto.html",[21,0.123,347,2.602]],["body/classes/UpdateBlogDto.html",[3,0.202,4,0.179,5,0.179,11,0.014,16,0.726,20,0.202,21,0.17,26,0.012,27,0.012,80,1.441,84,2.404,160,2.83,279,1.681,342,3.364,347,4.39,351,4.234,423,4.234,697,3.162,698,4.708,699,6.62]],["title/classes/UpdateCategoryDto.html",[21,0.123,391,2.602]],["body/classes/UpdateCategoryDto.html",[3,0.202,4,0.179,5,0.179,11,0.014,16,0.726,20,0.202,21,0.17,26,0.012,27,0.012,80,1.441,84,2.404,160,2.83,279,1.681,305,2.83,386,3.364,391,4.39,421,3.162,697,3.162,700,4.708,701,6.62]],["title/classes/UpdateFaqCategoryDto.html",[21,0.123,466,2.602]],["body/classes/UpdateFaqCategoryDto.html",[3,0.199,4,0.177,5,0.177,11,0.014,16,0.719,20,0.199,21,0.168,26,0.012,27,0.012,56,2.952,80,1.418,84,2.381,160,2.786,279,1.654,305,2.786,421,3.113,425,3.311,426,2.521,466,4.348,695,4.169,697,3.113,702,6.557]],["title/classes/UpdateFaqDto.html",[21,0.123,501,2.602]],["body/classes/UpdateFaqDto.html",[3,0.202,4,0.179,5,0.179,11,0.014,16,0.726,20,0.202,21,0.17,26,0.012,27,0.012,80,1.441,84,2.404,160,2.83,279,1.681,427,3.364,429,4.234,501,4.39,505,4.234,697,3.162,703,4.708,704,6.62]],["title/classes/UpdateQuestionDto.html",[21,0.123,630,2.602]],["body/classes/UpdateQuestionDto.html",[3,0.202,4,0.179,5,0.179,11,0.014,16,0.726,20,0.202,21,0.17,26,0.012,27,0.012,80,1.441,84,2.404,160,2.83,279,1.681,430,3.364,432,4.234,630,4.39,634,4.234,697,3.162,705,4.708,706,6.62]],["title/classes/UpdateUserDto.html",[21,0.123,707,2.602]],["body/classes/UpdateUserDto.html",[3,0.202,4,0.179,5,0.179,11,0.014,16,0.726,20,0.202,21,0.17,26,0.012,27,0.012,80,1.441,84,2.404,160,2.83,279,1.681,433,3.364,435,4.234,697,3.162,707,4.39,708,4.708,709,6.62,710,4.234]],["title/classes/User.html",[21,0.123,88,1.616]],["body/classes/User.html",[3,0.12,4,0.106,5,0.106,7,0.469,10,2.523,11,0.015,12,1.401,15,1.742,16,0.603,20,0.205,21,0.147,26,0.009,27,0.009,62,0.888,72,3.334,80,0.855,84,1.169,88,2.262,92,1.207,169,1.923,171,1.766,173,3.642,179,1.52,182,3.928,186,3.642,188,3.642,208,2.135,234,1.996,235,1.218,243,3.022,245,4.308,247,2.569,248,3.643,249,3.643,250,3.643,251,3.096,252,3.339,254,4.264,256,1.996,257,3.404,258,1.996,259,1.996,260,2.894,261,1.996,450,2.513,451,3.643,711,2.303,712,3.22,713,3.22,714,3.22,715,3.22,716,3.22,717,3.22,718,4.668,719,2.793]],["title/controllers/UserController.html",[0,1.314,720,2.806]],["body/controllers/UserController.html",[0,1.018,2,1.018,3,0.113,4,0.1,5,0.1,7,0.442,8,1.235,10,2.465,11,0.015,12,1.368,14,1.723,15,1.611,16,0.643,17,0.569,20,0.113,21,0.095,22,1.672,23,0.871,24,1.723,26,0.008,27,0.008,88,1.252,90,1.746,91,1.334,92,0.97,93,1.617,118,1.672,145,2.334,146,2.923,153,2.923,279,1.386,280,2.413,281,1.843,282,1.843,283,1.843,288,1.252,289,2.608,291,2.578,292,1.252,293,2.608,295,1.252,297,2.608,299,1.771,300,1.771,301,1.771,304,1.252,306,1.252,308,1.771,311,1.771,313,1.771,315,1.771,433,4.05,707,4.598,710,3.492,720,3.201,721,2.637,722,2.637,723,3.039,724,3.039,725,3.039,726,3.039,727,3.039,728,2.637,729,3.039,730,3.039,731,3.039,732,3.039,733,3.039,734,3.039]],["title/modules/UserModule.html",[28,1.314,47,2.432]],["body/modules/UserModule.html",[2,1.834,3,0.151,4,0.134,5,0.134,11,0.015,16,0.787,17,0.756,20,0.151,21,0.127,26,0.01,27,0.01,28,2.08,30,1.82,31,1.82,32,2.003,33,2.003,34,1.82,35,3.077,36,2.003,46,4.445,47,4.624,48,2.713,49,2.003,50,2.003,52,3.013,61,2.224,62,1.115,88,1.664,91,0.92,153,3.946,169,1.664,208,3.631,220,2.355,221,3.506,720,4.441,728,3.506,735,4.042,736,4.042,737,4.042,738,4.042,739,4.042,740,3.506,741,4.042]],["title/injectables/UserService.html",[73,0.965,153,2.159]],["body/injectables/UserService.html",[3,0.107,4,0.095,5,0.095,7,0.416,8,1.181,11,0.015,12,1.451,14,1.828,15,1.615,16,0.701,17,0.535,20,0.107,21,0.09,23,0.82,24,1.763,26,0.008,27,0.008,62,0.789,73,1.052,74,1.179,88,1.179,90,1.815,91,1.387,92,1.008,93,1.68,153,2.355,166,2.02,167,1.418,184,1.774,186,1.898,188,1.898,192,2.233,227,2.047,228,2.967,230,3.061,233,1.492,234,1.774,235,1.083,237,2.047,240,2.483,243,1.575,279,1.326,280,2.343,281,1.763,282,1.763,283,1.763,288,1.763,291,2.245,292,1.763,295,1.763,304,1.179,306,1.179,433,2.653,477,4.937,489,2.233,490,2.483,707,4.518,710,3.34,722,3.713,740,2.483,742,2.483,743,2.862,744,2.862,745,2.862,746,2.862,747,2.862,748,2.862,749,2.862,750,2.862,751,2.862,752,2.862,753,2.862,754,2.862,755,2.862,756,2.862]],["title/coverage.html",[757,4.187]],["body/coverage.html",[0,1.978,1,1.23,5,0.057,6,1.492,11,0.015,18,1.066,21,0.229,26,0.005,27,0.005,34,0.774,56,1.653,57,1.896,64,1.653,65,1.896,73,1.602,75,1.492,79,1.23,81,1.492,82,1.23,83,2.231,88,0.708,92,0.285,105,1.14,107,1.002,116,1.23,117,1.492,142,1.23,150,1.066,153,0.946,155,1.066,162,1.23,205,1.14,208,1.14,215,1.23,217,1.342,225,1.492,241,2.045,252,5.717,263,1.23,265,1.14,266,2.672,267,2.045,268,2.837,274,1.23,276,1.23,277,2.231,278,0.897,285,1.066,296,1.14,302,1.066,324,2.231,339,1.23,340,1.492,342,1.066,347,1.14,349,1.066,363,1.492,378,2.045,381,1.23,383,1.23,384,1.492,386,1.066,391,1.14,393,1.066,405,1.492,420,2.231,421,2.986,422,1.492,423,2.231,424,1.492,425,1.066,426,2.418,427,1.066,428,1.492,429,2.231,430,1.066,431,1.492,432,2.231,433,1.066,434,1.492,435,2.231,436,2.045,438,1.066,440,1.002,448,1.772,455,1.23,462,1.14,464,1.23,466,1.14,467,1.066,494,1.23,495,1.492,501,1.14,503,1.066,517,1.492,532,2.11,533,1.066,535,2.651,539,1.066,549,1.002,552,1.002,555,1.23,556,1.492,592,1.492,612,1.492,622,1.492,623,1.23,624,1.492,630,1.14,632,1.066,646,1.492,655,1.342,656,2.625,657,2.625,668,1.342,671,1.342,673,2.231,674,1.342,692,1.492,694,1.492,695,2.231,698,1.492,700,1.492,703,1.492,705,1.492,707,1.14,708,1.492,711,2.045,720,1.23,721,1.492,742,1.492,757,1.342,758,1.719,759,1.719,760,1.719,761,5.688,762,4.277,763,4.748,764,2.481,765,6.089,766,7.44,767,1.719,768,1.492,769,1.492,770,4.748,771,1.719,772,6.089,773,2.859,774,1.492,775,1.719,776,1.719]],["title/dependencies.html",[31,2.126,777,2.838]],["body/dependencies.html",[11,0.015,17,0.797,21,0.134,26,0.01,27,0.01,31,1.918,62,1.175,102,2.482,104,3.046,160,2.221,213,3.323,224,3.323,235,2.146,236,3.323,450,3.323,602,4.976,616,3.695,670,3.695,778,6.376,779,4.259,780,4.259,781,4.259,782,4.259,783,4.259,784,4.259,785,4.259,786,5.671,787,4.259,788,4.259,789,5.671,790,4.259,791,4.259,792,4.259,793,4.259,794,4.259,795,4.259,796,4.259,797,4.259,798,4.259,799,4.259,800,4.259,801,4.259,802,4.259,803,4.259,804,4.259,805,4.259,806,4.259,807,4.259,808,4.259,809,4.259]],["title/miscellaneous/functions.html",[810,2.027,811,4.096]],["body/miscellaneous/functions.html",[7,0.838,11,0.013,26,0.013,27,0.013,34,3.301,656,4.12,657,4.908,674,5.72,774,4.998,810,3.571,811,4.998,812,5.76,813,4.998]],["title/index.html",[7,0.476,814,3.271,815,3.271]],["body/index.html",[4,0.132,11,0.014,26,0.01,27,0.01,174,2.846,757,3.105,816,3.979,817,3.979,818,5.418,819,3.979,820,3.979,821,3.979,822,3.979,823,3.979,824,3.979,825,6.16,826,3.979,827,3.979,828,3.979,829,3.979,830,6.16,831,7.304,832,3.979,833,3.979,834,3.979,835,7.138,836,3.979,837,3.979,838,5.418,839,3.979,840,3.979,841,3.979,842,3.979,843,5.418,844,5.418,845,3.979,846,3.979,847,3.979,848,5.418,849,5.418,850,3.979,851,3.979,852,3.979,853,3.979,854,3.979,855,3.452,856,3.979,857,3.979,858,3.979,859,3.979,860,3.979,861,3.979,862,3.979,863,3.979,864,3.979,865,3.979,866,3.452,867,3.979,868,3.979,869,3.979,870,3.979,871,3.979,872,3.979,873,3.452]],["title/modules.html",[30,2.416]],["body/modules.html",[11,0.011,26,0.011,27,0.011,29,3.511,30,2.211,40,3.255,41,3.255,42,3.255,43,3.255,44,3.255,45,3.255,46,3.043,47,3.043,855,6.811,874,7.85,875,7.85,876,7.85]],["title/overview.html",[877,4.655]],["body/overview.html",[2,1.04,11,0.014,18,3.333,26,0.008,27,0.008,28,1.04,29,5.585,30,1.397,31,1.397,32,1.538,33,1.538,34,1.397,35,1.538,36,1.538,37,2.692,38,2.692,39,2.692,40,4.861,41,4.178,42,4.178,43,4.178,44,4.178,45,4.178,46,4.215,47,4.323,48,2.252,49,1.538,50,1.538,74,1.278,80,0.824,150,3.333,153,3.257,202,2.692,203,2.692,205,3.566,302,3.333,317,2.692,318,2.692,349,3.333,357,2.692,358,2.692,393,3.333,400,2.692,401,2.692,467,3.333,474,2.692,475,2.692,503,3.333,511,2.692,512,2.692,534,1.808,632,4.215,641,2.692,642,2.692,643,2.692,877,2.692,878,4.545,879,3.103,880,3.103,881,3.103]],["title/properties.html",[171,1.786,777,2.838]],["body/properties.html",[11,0.014,26,0.013,27,0.013,171,2.229,174,4.214,866,5.112,873,5.112,882,5.892,883,5.892,884,5.892]],["title/miscellaneous/typealiases.html",[810,2.027,885,4.722]],["body/miscellaneous/typealiases.html",[7,0.714,11,0.013,26,0.011,27,0.011,92,1.029,234,3.855,241,3.511,262,4.853,266,2.56,267,3.511,268,4.76,273,4.853,378,3.511,380,4.853,426,2.317,436,3.511,448,3.043,454,4.853,461,4.853,535,3.043,538,4.125,549,2.861,552,2.861,554,3.855,711,3.511,810,3.043,886,4.909,887,4.259,888,4.259,889,4.259,890,4.259,891,4.259,892,6.22,893,4.259,894,4.909]],["title/miscellaneous/variables.html",[810,2.027,895,4.096]],["body/miscellaneous/variables.html",[7,0.558,11,0.014,15,1.202,26,0.01,27,0.01,92,0.634,108,3.775,155,2.375,162,3.775,208,3.501,217,4.119,241,2.74,251,5.018,263,3.775,264,3.324,266,1.998,267,2.74,268,4.316,274,3.775,275,3.324,378,2.74,381,3.775,382,3.324,426,1.808,436,2.74,448,2.375,455,3.775,456,3.324,462,3.501,463,3.324,555,2.74,565,6.564,656,2.74,657,3.775,668,4.713,671,4.119,672,3.324,711,2.74,719,3.324,764,3.324,768,3.324,769,4.58,810,2.375,813,3.324,887,3.324,888,3.324,889,3.324,890,3.324,891,3.324,893,3.324,895,3.324,896,5.279,897,3.831,898,3.831,899,3.831,900,3.831,901,3.831]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":252,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":883,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":795,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":803,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":766,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":761,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":763,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":762,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":767,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":770,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["0:deleted",{"_index":249,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/User.html":{}}}],["1.0.0",{"_index":805,"title":{},"body":{"dependencies.html":{}}}],["1.1.0",{"_index":802,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["10.0.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["10.1.1",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["10.2.8",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["13",{"_index":879,"title":{},"body":{"overview.html":{}}}],["1:active",{"_index":250,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/User.html":{}}}],["2.29.4",{"_index":797,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":880,"title":{},"body":{"overview.html":{}}}],["3.1.1",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":804,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":114,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["5.0.1",{"_index":793,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":794,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":881,"title":{},"body":{"overview.html":{}}}],["6.2.0",{"_index":799,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":566,"title":{},"body":{"classes/JwtStorage.html":{}}}],["7.1.16",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":800,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":878,"title":{},"body":{"overview.html":{}}}],["_id",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BlogService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["action",{"_index":489,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["adds",{"_index":652,"title":{},"body":{"injectables/QuestionService.html":{}}}],["aliases",{"_index":886,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":856,"title":{},"body":{"index.html":{}}}],["answer",{"_index":437,"title":{},"body":{"classes/Faq.html":{}}}],["api",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["apibody",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiokresponse",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('authentication",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["app",{"_index":833,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":824,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["auth",{"_index":79,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["authcheckguard",{"_index":82,"title":{"injectables/AuthCheckGuard.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["authcontroller",{"_index":116,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":569,"title":{},"body":{"classes/JwtStorage.html":{}}}],["authguard",{"_index":101,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/TokenGuard.html":{}}}],["authguard('jwt",{"_index":85,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":866,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":150,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autocreate",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["autopopulate",{"_index":801,"title":{},"body":{"dependencies.html":{}}}],["await",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["backers",{"_index":857,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["bcrypt.compare(password",{"_index":620,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["bcrypt.hash(body.password",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["blog",{"_index":64,"title":{"classes/Blog.html":{}},"body":{"modules/AppModule.html":{},"classes/Blog.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/UpdateBlogCategoryDto.html":{},"coverage.html":{}}}],["blog.controller",{"_index":360,"title":{},"body":{"modules/BlogModule.html":{}}}],["blog.dto",{"_index":351,"title":{},"body":{"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/UpdateBlogDto.html":{}}}],["blog.dto.ts",{"_index":423,"title":{},"body":{"classes/CreateBlogDto.html":{},"classes/UpdateBlogDto.html":{},"coverage.html":{}}}],["blog.name",{"_index":362,"title":{},"body":{"modules/BlogModule.html":{}}}],["blog.service",{"_index":350,"title":{},"body":{"controllers/BlogController.html":{},"modules/BlogModule.html":{}}}],["blog/blog.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["blogcategory",{"_index":265,"title":{"classes/BlogCategory.html":{}},"body":{"classes/BlogCategory.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"coverage.html":{}}}],["blogcategory.name",{"_index":323,"title":{},"body":{"modules/BlogCategoryModule.html":{}}}],["blogcategorycontroller",{"_index":276,"title":{"controllers/BlogCategoryController.html":{}},"body":{"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"coverage.html":{}}}],["blogcategorymodel",{"_index":327,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["blogcategorymodule",{"_index":41,"title":{"modules/BlogCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["blogcategoryschema",{"_index":274,"title":{},"body":{"classes/BlogCategory.html":{},"modules/BlogCategoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogcategoryservice",{"_index":302,"title":{"injectables/BlogCategoryService.html":{}},"body":{"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["blogcategorytype",{"_index":273,"title":{},"body":{"classes/BlogCategory.html":{},"injectables/BlogCategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["blogcontroller",{"_index":339,"title":{"controllers/BlogController.html":{}},"body":{"controllers/BlogController.html":{},"modules/BlogModule.html":{},"coverage.html":{}}}],["blogmodel",{"_index":366,"title":{},"body":{"injectables/BlogService.html":{}}}],["blogmodule",{"_index":42,"title":{"modules/BlogModule.html":{}},"body":{"modules/AppModule.html":{},"modules/BlogModule.html":{},"modules.html":{},"overview.html":{}}}],["blogschema",{"_index":263,"title":{},"body":{"classes/Blog.html":{},"modules/BlogModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["blogservice",{"_index":349,"title":{"injectables/BlogService.html":{}},"body":{"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"coverage.html":{},"overview.html":{}}}],["blogtype",{"_index":262,"title":{},"body":{"classes/Blog.html":{},"injectables/BlogService.html":{},"miscellaneous/typealiases.html":{}}}],["body",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":876,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":874,"title":{},"body":{"modules.html":{}}}],["building",{"_index":819,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":661,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["canactivate",{"_index":95,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["category",{"_index":278,"title":{"classes/Category.html":{}},"body":{"controllers/BlogCategoryController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"controllers/FaqCategoryController.html":{},"coverage.html":{}}}],["category.controller",{"_index":320,"title":{},"body":{"modules/BlogCategoryModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{}}}],["category.controller.ts",{"_index":277,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{},"coverage.html":{}}}],["category.controller.ts:11",{"_index":286,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:16",{"_index":287,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:21",{"_index":290,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:26",{"_index":298,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:31",{"_index":294,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/FaqCategoryController.html":{}}}],["category.dto",{"_index":305,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{}}}],["category.dto.ts",{"_index":421,"title":{},"body":{"classes/CreateBlogCategoryDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["category.entity",{"_index":322,"title":{},"body":{"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"classes/Faq.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{}}}],["category.entity.ts",{"_index":268,"title":{},"body":{"classes/BlogCategory.html":{},"classes/FaqCategory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["category.entity.ts:11",{"_index":271,"title":{},"body":{"classes/BlogCategory.html":{}}}],["category.entity.ts:13",{"_index":459,"title":{},"body":{"classes/FaqCategory.html":{}}}],["category.entity.ts:16",{"_index":270,"title":{},"body":{"classes/BlogCategory.html":{}}}],["category.entity.ts:17",{"_index":458,"title":{},"body":{"classes/FaqCategory.html":{}}}],["category.entity.ts:23",{"_index":272,"title":{},"body":{"classes/BlogCategory.html":{}}}],["category.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["category.module.ts",{"_index":319,"title":{},"body":{"modules/BlogCategoryModule.html":{},"modules/FaqCategoryModule.html":{}}}],["category.name",{"_index":404,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.service",{"_index":303,"title":{},"body":{"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{}}}],["category.service.ts",{"_index":324,"title":{},"body":{"injectables/BlogCategoryService.html":{},"injectables/FaqCategoryService.html":{},"coverage.html":{}}}],["category.service.ts:14",{"_index":480,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:15",{"_index":328,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["category.service.ts:20",{"_index":482,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:21",{"_index":329,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["category.service.ts:24",{"_index":481,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:25",{"_index":330,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["category.service.ts:28",{"_index":483,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:29",{"_index":332,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["category.service.ts:32",{"_index":485,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:35",{"_index":331,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["category.service.ts:38",{"_index":484,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:9",{"_index":326,"title":{},"body":{"injectables/BlogCategoryService.html":{},"injectables/FaqCategoryService.html":{}}}],["category/blog",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"coverage.html":{}}}],["category/category.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["category/dto/create",{"_index":420,"title":{},"body":{"classes/CreateBlogCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"coverage.html":{}}}],["category/dto/update",{"_index":695,"title":{},"body":{"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["category/entities/blog",{"_index":267,"title":{},"body":{"classes/BlogCategory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["category/entities/category.entity",{"_index":449,"title":{},"body":{"classes/Faq.html":{}}}],["category/entities/faq",{"_index":448,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["category/faq",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"coverage.html":{}}}],["categorycontroller",{"_index":383,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodel",{"_index":408,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorymodule",{"_index":43,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryschema",{"_index":381,"title":{},"body":{"classes/Category.html":{},"modules/CategoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryservice",{"_index":393,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["categorytype",{"_index":380,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["class",{"_index":21,"title":{"classes/Auth.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":80,"title":{},"body":{"classes/Auth.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_blogcategorymodule",{"_index":317,"title":{},"body":{"modules/BlogCategoryModule.html":{},"overview.html":{}}}],["cluster_blogcategorymodule_providers",{"_index":318,"title":{},"body":{"modules/BlogCategoryModule.html":{},"overview.html":{}}}],["cluster_blogmodule",{"_index":357,"title":{},"body":{"modules/BlogModule.html":{},"overview.html":{}}}],["cluster_blogmodule_providers",{"_index":358,"title":{},"body":{"modules/BlogModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":400,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":401,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_faqcategorymodule",{"_index":474,"title":{},"body":{"modules/FaqCategoryModule.html":{},"overview.html":{}}}],["cluster_faqcategorymodule_providers",{"_index":475,"title":{},"body":{"modules/FaqCategoryModule.html":{},"overview.html":{}}}],["cluster_faqmodule",{"_index":511,"title":{},"body":{"modules/FaqModule.html":{},"overview.html":{}}}],["cluster_faqmodule_providers",{"_index":512,"title":{},"body":{"modules/FaqModule.html":{},"overview.html":{}}}],["cluster_questionmodule",{"_index":641,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_exports",{"_index":643,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_providers",{"_index":642,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":735,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":737,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":736,"title":{},"body":{"modules/UserModule.html":{}}}],["console.log('inside",{"_index":191,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(req.user",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(token",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{}}}],["console.log(tokenbody",{"_index":589,"title":{},"body":{"classes/JwtStorage.html":{}}}],["console.log(username",{"_index":617,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["const",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/ResponseTransformInterceptor.html":{},"classes/User.html":{}}}],["constructor",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(blogcategorymodel",{"_index":325,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["constructor(blogmodel",{"_index":364,"title":{},"body":{"injectables/BlogService.html":{}}}],["constructor(categorymodel",{"_index":406,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(faqcategorymodel",{"_index":478,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["constructor(faqmodel",{"_index":518,"title":{},"body":{"injectables/FaqService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["constructor(usermodel",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["content",{"_index":242,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{}}}],["context",{"_index":663,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.gethandler",{"_index":682,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.gethandler()[ignoredpropertyname",{"_index":684,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.switchtohttp().getrequest().reqid",{"_index":691,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.switchtohttp().getresponse().statuscode",{"_index":689,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('blog",{"_index":307,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{}}}],["controller('category",{"_index":394,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('faq",{"_index":468,"title":{},"body":{"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{}}}],["controller('question",{"_index":635,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controller('user",{"_index":729,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":757,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":279,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":308,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["create(createblogcategorydto",{"_index":284,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{}}}],["create(createblogdto",{"_index":341,"title":{},"body":{"controllers/BlogController.html":{},"injectables/BlogService.html":{}}}],["create(createcategorydto",{"_index":385,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createfaqcategorydto",{"_index":465,"title":{},"body":{"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{}}}],["create(createfaqdto",{"_index":496,"title":{},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{}}}],["create(createquestiondto",{"_index":625,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["create(createuserdto",{"_index":722,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createblogcategorydto",{"_index":285,"title":{"classes/CreateBlogCategoryDto.html":{}},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/UpdateBlogCategoryDto.html":{},"coverage.html":{}}}],["createblogdto",{"_index":342,"title":{"classes/CreateBlogDto.html":{}},"body":{"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/CreateBlogDto.html":{},"classes/UpdateBlogDto.html":{},"coverage.html":{}}}],["createcategorydto",{"_index":386,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createfaqcategorydto",{"_index":425,"title":{"classes/CreateFaqCategoryDto.html":{}},"body":{"classes/CreateFaqCategoryDto.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["createfaqdto",{"_index":427,"title":{"classes/CreateFaqDto.html":{}},"body":{"classes/CreateFaqDto.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["createquestiondto",{"_index":430,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestionDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createuser",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuser(body",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["createuserdto",{"_index":433,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.firstname",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.lastname",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.status",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["currentpage",{"_index":544,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["custom",{"_index":490,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["custommethod",{"_index":477,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["data",{"_index":550,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["data.hasownproperty('items",{"_index":688,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["days",{"_index":567,"title":{},"body":{"classes/JwtStorage.html":{}}}],["dbname",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/response.decorator",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["default",{"_index":251,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/JwtStorage.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":301,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":293,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{},"classes/FaqCategory.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":677,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["descriptor.value[ignoredpropertyname",{"_index":679,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["descrition",{"_index":248,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/User.html":{}}}],["detail",{"_index":536,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["details",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["development",{"_index":834,"title":{},"body":{"index.html":{}}}],["document",{"_index":257,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["documentation",{"_index":758,"title":{},"body":{"coverage.html":{}}}],["dto/auth.dto",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/create",{"_index":304,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":306,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":845,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":820,"title":{},"body":{"index.html":{}}}],["email",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{}}}],["entities/blog",{"_index":321,"title":{},"body":{"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{}}}],["entities/blog.entity",{"_index":361,"title":{},"body":{"modules/BlogModule.html":{},"injectables/BlogService.html":{}}}],["entities/category.entity",{"_index":403,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["entities/faq",{"_index":476,"title":{},"body":{"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{}}}],["entities/faq.entity",{"_index":515,"title":{},"body":{"modules/FaqModule.html":{},"injectables/FaqService.html":{}}}],["entities/user.entity",{"_index":740,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["err",{"_index":94,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["error('invalid",{"_index":588,"title":{},"body":{"classes/JwtStorage.html":{}}}],["example",{"_index":830,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":718,"title":{},"body":{"classes/User.html":{}}}],["executioncontext",{"_index":96,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["expired",{"_index":110,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["expiresin",{"_index":581,"title":{},"body":{"classes/JwtStorage.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":84,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["extracted",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["extractjwt",{"_index":600,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":605,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faq",{"_index":56,"title":{"classes/Faq.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["faq.controller",{"_index":514,"title":{},"body":{"modules/FaqModule.html":{}}}],["faq.dto",{"_index":505,"title":{},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{}}}],["faq.dto.ts",{"_index":429,"title":{},"body":{"classes/CreateFaqDto.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["faq.name",{"_index":516,"title":{},"body":{"modules/FaqModule.html":{}}}],["faq.service",{"_index":504,"title":{},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{}}}],["faq/faq.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["faqcategory",{"_index":440,"title":{"classes/FaqCategory.html":{}},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{},"coverage.html":{}}}],["faqcategory.name",{"_index":453,"title":{},"body":{"classes/Faq.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{}}}],["faqcategorycontroller",{"_index":464,"title":{"controllers/FaqCategoryController.html":{}},"body":{"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"coverage.html":{}}}],["faqcategorymodel",{"_index":479,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["faqcategorymodule",{"_index":44,"title":{"modules/FaqCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FaqCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["faqcategoryschema",{"_index":462,"title":{},"body":{"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["faqcategoryservice",{"_index":467,"title":{"injectables/FaqCategoryService.html":{}},"body":{"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["faqcategorytype",{"_index":461,"title":{},"body":{"classes/FaqCategory.html":{},"injectables/FaqCategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["faqcontroller",{"_index":494,"title":{"controllers/FaqController.html":{}},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{},"coverage.html":{}}}],["faqmodel",{"_index":520,"title":{},"body":{"injectables/FaqService.html":{}}}],["faqmodule",{"_index":45,"title":{"modules/FaqModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FaqModule.html":{},"modules.html":{},"overview.html":{}}}],["faqschema",{"_index":455,"title":{},"body":{"classes/Faq.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["faqservice",{"_index":503,"title":{"injectables/FaqService.html":{}},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"coverage.html":{},"overview.html":{}}}],["faqtype",{"_index":454,"title":{},"body":{"classes/Faq.html":{},"injectables/FaqService.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":280,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":281,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":311,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":288,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["firstname",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["firstpageurl",{"_index":545,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["forum",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["forumadminsecret",{"_index":584,"title":{},"body":{"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{}}}],["framework",{"_index":818,"title":{},"body":{"index.html":{}}}],["function",{"_index":673,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["functions",{"_index":811,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":561,"title":{},"body":{"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{}}}],["generatetoken(user",{"_index":570,"title":{},"body":{"classes/JwtStorage.html":{}}}],["get('/me",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/me')@responsemessage('user",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":289,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmudetails",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["getmudetails(@request",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{}}}],["getmudetails(req",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["getting",{"_index":814,"title":{"index.html":{}},"body":{}}],["grow",{"_index":852,"title":{},"body":{"index.html":{}}}],["guards/token.guard",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["handlerequest",{"_index":86,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["handlerequest(err",{"_index":87,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["hello",{"_index":77,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":863,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":97,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["httpexception",{"_index":98,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["https://nestjs.com",{"_index":870,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":99,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["httpstatus.forbidden",{"_index":115,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["id",{"_index":291,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":759,"title":{},"body":{"coverage.html":{}}}],["ierrorbody",{"_index":533,"title":{"interfaces/IErrorBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{}}}],["ignoredpropertyname",{"_index":671,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":606,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":557,"title":{},"body":{"classes/JwtStorage.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["in')@apibody({schema",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"classes/JwtStorage.html":{}}}],["inject('tokenstorage",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["inject(jwtservice",{"_index":579,"title":{},"body":{"classes/JwtStorage.html":{}}}],["injectable",{"_index":73,"title":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":74,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["injectmodel(blog.name",{"_index":372,"title":{},"body":{"injectables/BlogService.html":{}}}],["injectmodel(blogcategory.name",{"_index":333,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["injectmodel(category.name",{"_index":414,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectmodel(faq.name",{"_index":526,"title":{},"body":{"injectables/FaqService.html":{}}}],["injectmodel(faqcategory.name",{"_index":486,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["injectmodel(user.name",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":829,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":832,"title":{},"body":{"index.html":{}}}],["instance",{"_index":537,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["intercept",{"_index":658,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["intercept(context",{"_index":659,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["interface",{"_index":532,"title":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["interfaces",{"_index":534,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"overview.html":{}}}],["isignored",{"_index":683,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["isuccessbody",{"_index":554,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["itemcount",{"_index":540,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["items",{"_index":553,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["itemsbody",{"_index":552,"title":{"interfaces/ItemsBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["itemsperpage",{"_index":542,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["join",{"_index":859,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":604,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStorage.html":{}}}],["jwtstorage",{"_index":555,"title":{"classes/JwtStorage.html":{}},"body":{"classes/JwtStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtstorage.token_expiry",{"_index":582,"title":{},"body":{"classes/JwtStorage.html":{}}}],["jwtstorage.token_type",{"_index":587,"title":{},"body":{"classes/JwtStorage.html":{}}}],["jwtstrategy",{"_index":205,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":867,"title":{},"body":{"index.html":{}}}],["label",{"_index":269,"title":{},"body":{"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/FaqCategory.html":{}}}],["lastname",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["lastpageurl",{"_index":546,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":873,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":849,"title":{},"body":{"index.html":{}}}],["literal",{"_index":894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":616,"title":{},"body":{"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":215,"title":{"classes/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"classes/LocalStrategy.html":{},"coverage.html":{}}}],["login",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@request",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(req",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["map",{"_index":665,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["map((data",{"_index":687,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":108,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"miscellaneous/variables.html":{}}}],["messagecode",{"_index":111,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["metadata",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":810,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":848,"title":{},"body":{"index.html":{}}}],["mode",{"_index":838,"title":{},"body":{"index.html":{}}}],["model",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":796,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":798,"title":{},"body":{"dependencies.html":{}}}],["mongodb+srv://aj_mah:admin123@cluster0.q7fbsn8.mongodb.net/?retrywrites=true&w=majority",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseschema",{"_index":447,"title":{},"body":{"classes/Faq.html":{}}}],["mongooseschema.types.objectid",{"_index":452,"title":{},"body":{"classes/Faq.html":{}}}],["more",{"_index":862,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":868,"title":{},"body":{"index.html":{}}}],["name",{"_index":91,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":825,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":872,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":664,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":670,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"classes/JwtStorage.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":102,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":107,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["next",{"_index":660,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":686,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":685,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["nextpageurl",{"_index":547,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["node.js",{"_index":817,"title":{},"body":{"index.html":{}}}],["npm",{"_index":831,"title":{},"body":{"index.html":{}}}],["null",{"_index":680,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["number",{"_index":247,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"classes/User.html":{}}}],["object",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["observable",{"_index":103,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["open",{"_index":850,"title":{},"body":{"index.html":{}}}],["optional",{"_index":93,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":877,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":777,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationmetainterface",{"_index":539,"title":{"interfaces/PaginationMetaInterface.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{}}}],["param",{"_index":300,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":697,"title":{},"body":{"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createblogcategorydto",{"_index":696,"title":{},"body":{"classes/UpdateBlogCategoryDto.html":{}}}],["partialtype(createblogdto",{"_index":699,"title":{},"body":{"classes/UpdateBlogDto.html":{}}}],["partialtype(createcategorydto",{"_index":701,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createfaqcategorydto",{"_index":702,"title":{},"body":{"classes/UpdateFaqCategoryDto.html":{}}}],["partialtype(createfaqdto",{"_index":704,"title":{},"body":{"classes/UpdateFaqDto.html":{}}}],["partialtype(createquestiondto",{"_index":706,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createuserdto",{"_index":709,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":602,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":599,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":593,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["password",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LocalStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{}}}],["patch",{"_index":299,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":297,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["payload",{"_index":598,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload._id",{"_index":608,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":609,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":610,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":611,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":860,"title":{},"body":{"index.html":{}}}],["post",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["post('/sign",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["previouspageurl",{"_index":548,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["private",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BlogCategoryService.html":{},"injectables/BlogService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["production",{"_index":840,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":816,"title":{},"body":{"index.html":{}}}],["project",{"_index":851,"title":{},"body":{"index.html":{}}}],["promise",{"_index":574,"title":{},"body":{"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/TokenStorage.html":{}}}],["prop",{"_index":254,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["prop({required",{"_index":457,"title":{},"body":{"classes/FaqCategory.html":{}}}],["prop({type",{"_index":245,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Faq.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":445,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{}}}],["properties",{"_index":171,"title":{"properties.html":{}},"body":{"controllers/AuthController.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":678,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["propertykey",{"_index":676,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["provide",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/token",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{}}}],["public",{"_index":562,"title":{},"body":{"classes/JwtStorage.html":{}}}],["question",{"_index":438,"title":{"classes/Question.html":{}},"body":{"classes/Faq.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["question.controller",{"_index":645,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.dto",{"_index":634,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":432,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.service",{"_index":633,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{}}}],["question/question.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["questioncontroller",{"_index":623,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"coverage.html":{}}}],["questionmodule",{"_index":46,"title":{"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["questionservice",{"_index":632,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["read",{"_index":861,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"interfaces/ResourceBody.html":{},"interfaces/TokenStorage.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ref",{"_index":442,"title":{},"body":{"classes/Faq.html":{}}}],["reflect",{"_index":806,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":669,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["reflector().get(responsemessagekey",{"_index":681,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["remove",{"_index":282,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":315,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":292,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":654,"title":{},"body":{"injectables/QuestionService.html":{}}}],["repository",{"_index":828,"title":{},"body":{"index.html":{}}}],["req",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user._id",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.email",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.firstname",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.user.lastname",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{}}}],["reqid",{"_index":690,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["request",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":460,"title":{},"body":{"classes/FaqCategory.html":{}}}],["res",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resourcebody",{"_index":549,"title":{"interfaces/ResourceBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["response/types",{"_index":667,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["responsemessage",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage('user",{"_index":195,"title":{},"body":{"controllers/AuthController.html":{}}}],["responsemessagekey",{"_index":668,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsetransforminterceptor",{"_index":655,"title":{"injectables/ResponseTransformInterceptor.html":{}},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{}}}],["responsetransforminterceptorignore",{"_index":674,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":835,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":104,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":666,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["scalable",{"_index":821,"title":{},"body":{"index.html":{}}}],["schema",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":256,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(blog",{"_index":264,"title":{},"body":{"classes/Blog.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(blogcategory",{"_index":275,"title":{},"body":{"classes/BlogCategory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(category",{"_index":382,"title":{},"body":{"classes/Category.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(faq",{"_index":456,"title":{},"body":{"classes/Faq.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(faqcategory",{"_index":463,"title":{},"body":{"classes/FaqCategory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":719,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":583,"title":{},"body":{"classes/JwtStorage.html":{}}}],["secretorkey",{"_index":607,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":822,"title":{},"body":{"index.html":{}}}],["setmetadata(responsemessagekey",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":823,"title":{},"body":{"index.html":{}}}],["sign",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(@body",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(body",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["signupdto",{"_index":142,"title":{"interfaces/SignUpDTO.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/SignUpDTO.html":{},"coverage.html":{}}}],["socket.io",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"modules/BlogModule.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/CreateBlogDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateBlogCategoryDto.html":{},"classes/UpdateBlogDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":854,"title":{},"body":{"index.html":{}}}],["src/.../blog",{"_index":887,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../blog.entity.ts",{"_index":888,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../category.entity.ts",{"_index":889,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../faq",{"_index":890,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../faq.entity.ts",{"_index":891,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../response",{"_index":813,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../response.decorator.ts",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":892,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.entity.ts",{"_index":893,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":75,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":76,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:67",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:8",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/response.decorator.ts",{"_index":764,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/auth.dto.ts",{"_index":692,"title":{},"body":{"interfaces/SignUpDTO.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":81,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guards/token.guard.ts",{"_index":83,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["src/auth/guards/token.guard.ts:15",{"_index":693,"title":{},"body":{"injectables/TokenGuard.html":{}}}],["src/auth/guards/token.guard.ts:34",{"_index":89,"title":{},"body":{"injectables/AuthCheckGuard.html":{}}}],["src/auth/interceptors/response",{"_index":656,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/auth/providers/token",{"_index":768,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/response/types.ts",{"_index":535,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/storage/jwt.storage.ts",{"_index":556,"title":{},"body":{"classes/JwtStorage.html":{},"coverage.html":{}}}],["src/auth/storage/jwt.storage.ts:12",{"_index":568,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/auth/storage/jwt.storage.ts:13",{"_index":564,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/auth/storage/jwt.storage.ts:21",{"_index":571,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/auth/storage/jwt.storage.ts:27",{"_index":573,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/auth/storage/token.storage.ts",{"_index":694,"title":{},"body":{"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts",{"_index":592,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/jwt.strategy.ts:15",{"_index":597,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/jwt.strategy.ts:6",{"_index":595,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts",{"_index":612,"title":{},"body":{"classes/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local.strategy.ts:17",{"_index":615,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["src/auth/strategy/local.strategy.ts:9",{"_index":613,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["src/blog",{"_index":266,"title":{},"body":{"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"modules/BlogCategoryModule.html":{},"injectables/BlogCategoryService.html":{},"classes/CreateBlogCategoryDto.html":{},"classes/UpdateBlogCategoryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blog/blog.controller.ts",{"_index":340,"title":{},"body":{"controllers/BlogController.html":{},"coverage.html":{}}}],["src/blog/blog.controller.ts:11",{"_index":343,"title":{},"body":{"controllers/BlogController.html":{}}}],["src/blog/blog.controller.ts:16",{"_index":344,"title":{},"body":{"controllers/BlogController.html":{}}}],["src/blog/blog.controller.ts:21",{"_index":345,"title":{},"body":{"controllers/BlogController.html":{}}}],["src/blog/blog.controller.ts:26",{"_index":348,"title":{},"body":{"controllers/BlogController.html":{}}}],["src/blog/blog.controller.ts:31",{"_index":346,"title":{},"body":{"controllers/BlogController.html":{}}}],["src/blog/blog.module.ts",{"_index":359,"title":{},"body":{"modules/BlogModule.html":{}}}],["src/blog/blog.service.ts",{"_index":363,"title":{},"body":{"injectables/BlogService.html":{},"coverage.html":{}}}],["src/blog/blog.service.ts:14",{"_index":367,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/blog.service.ts:20",{"_index":368,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/blog.service.ts:24",{"_index":369,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/blog.service.ts:28",{"_index":371,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/blog.service.ts:34",{"_index":370,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/blog.service.ts:9",{"_index":365,"title":{},"body":{"injectables/BlogService.html":{}}}],["src/blog/dto/create",{"_index":422,"title":{},"body":{"classes/CreateBlogDto.html":{},"coverage.html":{}}}],["src/blog/dto/update",{"_index":698,"title":{},"body":{"classes/UpdateBlogDto.html":{},"coverage.html":{}}}],["src/blog/entities/blog.entity.ts",{"_index":241,"title":{},"body":{"classes/Blog.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/blog/entities/blog.entity.ts:11",{"_index":255,"title":{},"body":{"classes/Blog.html":{}}}],["src/blog/entities/blog.entity.ts:16",{"_index":246,"title":{},"body":{"classes/Blog.html":{}}}],["src/blog/entities/blog.entity.ts:23",{"_index":253,"title":{},"body":{"classes/Blog.html":{}}}],["src/category/category.controller.ts",{"_index":384,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:11",{"_index":387,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:16",{"_index":388,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:21",{"_index":389,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:26",{"_index":392,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:31",{"_index":390,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":402,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":405,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:15",{"_index":409,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:19",{"_index":410,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:23",{"_index":411,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:27",{"_index":413,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:33",{"_index":412,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:9",{"_index":407,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":424,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":700,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts",{"_index":378,"title":{},"body":{"classes/Category.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/category/entities/category.entity.ts:11",{"_index":379,"title":{},"body":{"classes/Category.html":{}}}],["src/faq",{"_index":426,"title":{},"body":{"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/faq/dto/create",{"_index":428,"title":{},"body":{"classes/CreateFaqDto.html":{},"coverage.html":{}}}],["src/faq/dto/update",{"_index":703,"title":{},"body":{"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["src/faq/entities/faq.entity.ts",{"_index":436,"title":{},"body":{"classes/Faq.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/faq/entities/faq.entity.ts:16",{"_index":446,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/entities/faq.entity.ts:19",{"_index":439,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/entities/faq.entity.ts:26",{"_index":444,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/faq.controller.ts",{"_index":495,"title":{},"body":{"controllers/FaqController.html":{},"coverage.html":{}}}],["src/faq/faq.controller.ts:11",{"_index":497,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:16",{"_index":498,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:21",{"_index":499,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:26",{"_index":502,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:31",{"_index":500,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.module.ts",{"_index":513,"title":{},"body":{"modules/FaqModule.html":{}}}],["src/faq/faq.service.ts",{"_index":517,"title":{},"body":{"injectables/FaqService.html":{},"coverage.html":{}}}],["src/faq/faq.service.ts:14",{"_index":521,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:20",{"_index":522,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:24",{"_index":523,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:28",{"_index":525,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:34",{"_index":524,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:9",{"_index":519,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/main.ts",{"_index":774,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/question/dto/create",{"_index":431,"title":{},"body":{"classes/CreateQuestionDto.html":{},"coverage.html":{}}}],["src/question/dto/update",{"_index":705,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["src/question/entities/question.entity.ts",{"_index":622,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/question/question.controller.ts",{"_index":624,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/question/question.controller.ts:11",{"_index":626,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:16",{"_index":627,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:21",{"_index":628,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:26",{"_index":631,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:31",{"_index":629,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.module",{"_index":741,"title":{},"body":{"modules/UserModule.html":{}}}],["src/question/question.module.ts",{"_index":644,"title":{},"body":{"modules/QuestionModule.html":{}}}],["src/question/question.service.ts",{"_index":646,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/question/question.service.ts:11",{"_index":648,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:15",{"_index":649,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:19",{"_index":651,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:23",{"_index":650,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:7",{"_index":647,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/user/dto/create",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":708,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["src/user/entities/user.entity.ts",{"_index":711,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":713,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":714,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":712,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:29",{"_index":716,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":717,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":721,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:19",{"_index":723,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:24",{"_index":724,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:29",{"_index":725,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:34",{"_index":727,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:39",{"_index":726,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/user/user.module.ts",{"_index":738,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["src/user/user.service.ts",{"_index":742,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:14",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":747,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":749,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:38",{"_index":748,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":743,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":836,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":839,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":841,"title":{},"body":{"index.html":{}}}],["started",{"_index":815,"title":{"index.html":{}},"body":{}}],["starter",{"_index":827,"title":{},"body":{"index.html":{}}}],["statements",{"_index":760,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":558,"title":{},"body":{"classes/JwtStorage.html":{}}}],["status",{"_index":243,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["statuscode",{"_index":113,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["stay",{"_index":864,"title":{},"body":{"index.html":{}}}],["storage.provider",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["storage.provider.ts",{"_index":769,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage/token.storage",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["strategy",{"_index":601,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy/local.strategy",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@exclude",{"_index":715,"title":{},"body":{"classes/User.html":{}}}],["sub",{"_index":578,"title":{},"body":{"classes/JwtStorage.html":{}}}],["successfully",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["successfully')@useguards(tokenguard",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["super",{"_index":603,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["supplied",{"_index":619,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["support",{"_index":855,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":875,"title":{},"body":{"modules.html":{}}}],["symbol('ignoredpropertyname",{"_index":672,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":551,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["table",{"_index":776,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":675,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["test",{"_index":844,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":847,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":846,"title":{},"body":{"index.html":{}}}],["tests",{"_index":843,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":853,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createuser(body",{"_index":201,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.blogcategorymodel.create",{"_index":334,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["this.blogcategorymodel.deleteone({_id",{"_index":338,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["this.blogcategorymodel.find",{"_index":335,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["this.blogcategorymodel.findbyid(id",{"_index":336,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["this.blogcategorymodel.findbyidandupdate(id",{"_index":337,"title":{},"body":{"injectables/BlogCategoryService.html":{}}}],["this.blogcategoryservice.create(createblogcategorydto",{"_index":309,"title":{},"body":{"controllers/BlogCategoryController.html":{}}}],["this.blogcategoryservice.findall",{"_index":310,"title":{},"body":{"controllers/BlogCategoryController.html":{}}}],["this.blogcategoryservice.findone(id",{"_index":312,"title":{},"body":{"controllers/BlogCategoryController.html":{}}}],["this.blogcategoryservice.remove(id",{"_index":316,"title":{},"body":{"controllers/BlogCategoryController.html":{}}}],["this.blogcategoryservice.update(id",{"_index":314,"title":{},"body":{"controllers/BlogCategoryController.html":{}}}],["this.blogmodel.create",{"_index":373,"title":{},"body":{"injectables/BlogService.html":{}}}],["this.blogmodel.deleteone",{"_index":377,"title":{},"body":{"injectables/BlogService.html":{}}}],["this.blogmodel.find",{"_index":374,"title":{},"body":{"injectables/BlogService.html":{}}}],["this.blogmodel.findbyid(id",{"_index":375,"title":{},"body":{"injectables/BlogService.html":{}}}],["this.blogmodel.findbyidandupdate(id",{"_index":376,"title":{},"body":{"injectables/BlogService.html":{}}}],["this.blogservice.create(createblogdto",{"_index":352,"title":{},"body":{"controllers/BlogController.html":{}}}],["this.blogservice.findall",{"_index":353,"title":{},"body":{"controllers/BlogController.html":{}}}],["this.blogservice.findone(id",{"_index":354,"title":{},"body":{"controllers/BlogController.html":{}}}],["this.blogservice.remove(id",{"_index":356,"title":{},"body":{"controllers/BlogController.html":{}}}],["this.blogservice.update(id",{"_index":355,"title":{},"body":{"controllers/BlogController.html":{}}}],["this.categorymodel.create",{"_index":415,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.deleteone({_id:id",{"_index":419,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.find",{"_index":416,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyid(id",{"_index":417,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyidandupdate(id",{"_index":418,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":395,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":396,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(id",{"_index":397,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":399,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":398,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.faqcategorymodel.create",{"_index":487,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.deleteone",{"_index":493,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.find",{"_index":488,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.findbyid(id",{"_index":491,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.findbyidandupdate(id",{"_index":492,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategoryservice.create(createfaqcategorydto",{"_index":469,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.findall",{"_index":470,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.findone(id",{"_index":471,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.remove(id",{"_index":473,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.update(id",{"_index":472,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqmodel.create",{"_index":527,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.deleteone",{"_index":531,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.find",{"_index":528,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.findbyid(id",{"_index":529,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.findbyidandupdate(id",{"_index":530,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqservice.create(createfaqdto",{"_index":506,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.findall",{"_index":507,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.findone(id",{"_index":508,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.remove(id",{"_index":510,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.update(id",{"_index":509,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.jwtservice.signasync(user",{"_index":580,"title":{},"body":{"classes/JwtStorage.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":585,"title":{},"body":{"classes/JwtStorage.html":{}}}],["this.questionservice.create(createquestiondto",{"_index":636,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findall",{"_index":637,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findone(id",{"_index":638,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":640,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":639,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.tokenstorage.generatetoken",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.usermodel.create",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.deleteone",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":590,"title":{},"body":{"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["this.userservice.create(createuserdto",{"_index":730,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":731,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":732,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(req.user._id",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.userservice.remove(id",{"_index":734,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":733,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":106,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{}}}],["timestamps",{"_index":258,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["title",{"_index":244,"title":{},"body":{"classes/Blog.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["tojson",{"_index":259,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["token",{"_index":109,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"classes/JwtStorage.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{}}}],["token.storage",{"_index":576,"title":{},"body":{"classes/JwtStorage.html":{}}}],["token_expired",{"_index":112,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["token_expiry",{"_index":559,"title":{},"body":{"classes/JwtStorage.html":{}}}],["token_type",{"_index":560,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody",{"_index":577,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody.sub",{"_index":591,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody.type",{"_index":586,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenguard",{"_index":105,"title":{"injectables/TokenGuard.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["tokenstorage",{"_index":155,"title":{"interfaces/TokenStorage.html":{}},"body":{"controllers/AuthController.html":{},"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenstorageprovider",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toobject",{"_index":261,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["totalitems",{"_index":541,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["totalpages",{"_index":543,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["touch",{"_index":865,"title":{},"body":{"index.html":{}}}],["transform.interceptor.ts",{"_index":657,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["transform.interceptor.ts:29",{"_index":662,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["transformer",{"_index":450,"title":{},"body":{"classes/Faq.html":{},"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseTransformInterceptor.html":{},"classes/User.html":{}}}],["twitter",{"_index":871,"title":{},"body":{"index.html":{}}}],["type",{"_index":92,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Blog.html":{},"classes/BlogCategory.html":{},"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":885,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":792,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":826,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":100,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":618,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["undefined",{"_index":441,"title":{},"body":{"classes/Faq.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["undefined})@apiokresponse({description",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@type(undefined",{"_index":443,"title":{},"body":{"classes/Faq.html":{}}}],["unique",{"_index":451,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["unit",{"_index":842,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":884,"title":{},"body":{"properties.html":{}}}],["up",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":283,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":313,"title":{},"body":{"controllers/BlogCategoryController.html":{},"controllers/BlogController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":295,"title":{},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"controllers/BlogController.html":{},"injectables/BlogService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateblogcategorydto",{"_index":296,"title":{"classes/UpdateBlogCategoryDto.html":{}},"body":{"controllers/BlogCategoryController.html":{},"injectables/BlogCategoryService.html":{},"classes/UpdateBlogCategoryDto.html":{},"coverage.html":{}}}],["updateblogdto",{"_index":347,"title":{"classes/UpdateBlogDto.html":{}},"body":{"controllers/BlogController.html":{},"injectables/BlogService.html":{},"classes/UpdateBlogDto.html":{},"coverage.html":{}}}],["updatecategorydto",{"_index":391,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatefaqcategorydto",{"_index":466,"title":{"classes/UpdateFaqCategoryDto.html":{}},"body":{"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["updatefaqdto",{"_index":501,"title":{"classes/UpdateFaqDto.html":{}},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["updatequestiondto",{"_index":630,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updates",{"_index":653,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateuserdto",{"_index":707,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["useclass",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard('local",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(tokenguard",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":88,"title":{"classes/User.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":739,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":710,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.name",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["user.password",{"_index":621,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["user.service",{"_index":728,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/entities/user.entity",{"_index":575,"title":{},"body":{"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["user/user.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["usercontroller",{"_index":720,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodel",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":47,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{},"classes/LocalStrategy.html":{},"interfaces/SignUpDTO.html":{}}}],["users",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["users'})@useguards(undefined",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["userschema",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":153,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["validate",{"_index":594,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["validate(payload",{"_index":596,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":614,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["validatetoken",{"_index":563,"title":{},"body":{"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{}}}],["validatetoken(token",{"_index":572,"title":{},"body":{"classes/JwtStorage.html":{}}}],["validationerrors",{"_index":538,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"miscellaneous/typealiases.html":{}}}],["value",{"_index":565,"title":{},"body":{"classes/JwtStorage.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":765,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":895,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":882,"title":{},"body":{"properties.html":{}}}],["virtuals",{"_index":260,"title":{},"body":{"classes/Blog.html":{},"classes/BlogCategory.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["watch",{"_index":837,"title":{},"body":{"index.html":{}}}],["website",{"_index":869,"title":{},"body":{"index.html":{}}}],["world",{"_index":78,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":858,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/BlogCategoryModule.html":{},"modules/BlogModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogCategoryModule\n\nBlogCategoryModule\n\nAppModule -->\n\nBlogCategoryModule->AppModule\n\n\n\n\n\nBlogModule\n\nBlogModule\n\nAppModule -->\n\nBlogModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nAppModule -->\n\nFaqCategoryModule->AppModule\n\n\n\n\n\nFaqModule\n\nFaqModule\n\nAppModule -->\n\nFaqModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            BlogCategoryModule\n                        \n                        \n                            BlogModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            FaqCategoryModule\n                        \n                        \n                            FaqModule\n                        \n                        \n                            QuestionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { FaqModule } from './faq/faq.module';\nimport { FaqCategoryModule } from './faq-category/faq-category.module';\nimport { QuestionModule } from './question/question.module';\nimport { CategoryModule } from './category/category.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { BlogModule } from './blog/blog.module';\nimport { BlogCategoryModule } from './blog-category/blog-category.module';\nimport { AuthModule } from './auth/auth.module';\n\n\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      'mongodb+srv://Aj_Mah:admin123@cluster0.q7fbsn8.mongodb.net/?retryWrites=true&w=majority',\n      {\n        dbName: 'forum',\n        autoCreate: true,\n      },\n    ),\n    UserModule,\n    FaqModule,\n    FaqCategoryModule,\n    QuestionModule,\n    CategoryModule,\n    BlogModule,\n    BlogCategoryModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthCheckGuard.html":{"url":"injectables/AuthCheckGuard.html","title":"injectable - AuthCheckGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthCheckGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/token.guard.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CanActivate,\n    ExecutionContext,\n    HttpCode,\n    HttpException,\n    HttpStatus,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { AuthGuard } from '@nestjs/passport';\n  import { Observable } from 'rxjs';\n  \n  @Injectable()\n  export class TokenGuard extends AuthGuard('jwt') {\n    handleRequest(err, user, info: any) {\n      if (info) {\n        throw new HttpException(\n          {\n            message: 'Token expired',\n            messageCode: 'TOKEN_EXPIRED',\n            statusCode: 403,\n          },\n          HttpStatus.FORBIDDEN,\n        );\n      }\n      if (err || !user) throw err || new UnauthorizedException();\n  \n      return user;\n    }\n  }\n  \n  @Injectable()\n  export class AuthCheckGuard extends AuthGuard('jwt') {\n    handleRequest(err, user, info: any) {\n      return user;\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getMuDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getMuDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMuDetails(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@ResponseMessage('User Details extracted successfully')@UseGuards(TokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@ApiBody({schema: undefined})@ApiOkResponse({description: 'API to sign in users'})@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(body: SignUpDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-up')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            SignUpDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Request,\n  Inject,\n  UseGuards,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { AuthService } from './auth.service';\nimport { SignUpDTO } from './dto/auth.dto';\nimport { UserService } from 'src/user/user.service';\nimport { TokenStorage } from './storage/token.storage';\nimport { ApiBody, ApiOkResponse, ApiTags } from '@nestjs/swagger';\nimport { TokenGuard } from './guards/token.guard';\nimport { ResponseMessage } from './decorators/response.decorator';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    private readonly authService: AuthService,\n    @Inject('TokenStorage')\n    private readonly tokenStorage: TokenStorage,\n    private readonly userService: UserService,\n  ) {}\n\n  @Post('/sign-in')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        username: {\n          type: 'string',\n        },\n        password: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @ApiOkResponse({ description: 'API to sign in users' })\n  @UseGuards(AuthGuard('local'))\n  async login(@Request() req: any, res: Response) {\n    console.log(req.user);\n    const token = await this.tokenStorage.generateToken({\n      email: req.user.email,\n      _id: req.user._id,\n      // firstName: req.user.firstName,\n      // lastName: req.user.lastName,\n    });\n    console.log(token)\n    // console.log('inside method');\n    return {\n      user: req.user,\n      token: token,\n    };\n  }\n  @Get('/me')\n  @ResponseMessage('User Details extracted successfully')\n  @UseGuards(TokenGuard)\n  async getMuDetails(@Request() req: any) {\n    return this.userService.findOne(req.user._id);\n  }\n  @Post('/sign-up')\n  async signup(@Body() body: SignUpDTO) {\n    return this.authService.createUser(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from 'src/user/entities/user.entity';\nimport { UserModule } from 'src/user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from 'src/user/user.service';\nimport { JwtStrategy } from './Strategy/jwt.strategy';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { TokenStorageProvider } from './providers/token-storage.provider';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UserModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  controllers: [AuthController],\n  providers: [\n    JwtService,\n    UserService,\n    TokenStorageProvider,\n    LocalStrategy,\n    JwtStrategy,\n    AuthService,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserType } from 'src/user/entities/user.entity';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  async createUser(body: any) {\n    const password = await bcrypt.hash(body.password, 10);\n    return this.userModel.create({\n      ...body,\n      password: password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Blog.html":{"url":"classes/Blog.html","title":"class - Blog","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Blog\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog/entities/blog.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog/entities/blog.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string', descrition: '0:deleted, 1:active', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog/entities/blog.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog/entities/blog.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class Blog extends Document {\n  @Prop()\n  title: string;\n\n  @Prop({\n    type: 'string',\n  })\n  content: string;\n\n  @Prop({\n    type: 'string',\n    descrition: '0:deleted, 1:active',\n    default: 0,\n  })\n  status: number;\n}\n\nexport type BlogType = Blog & Document;\nexport const BlogSchema = SchemaFactory.createForClass(Blog);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BlogCategory.html":{"url":"classes/BlogCategory.html","title":"class - BlogCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BlogCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog-category/entities/blog-category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                content\n                            \n                            \n                                    \n                                label\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog-category/entities/blog-category.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog-category/entities/blog-category.entity.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string', descrition: '0:deleted, 1:active', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/blog-category/entities/blog-category.entity.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class BlogCategory extends Document {\n  @Prop()\n  label: string;\n\n  @Prop({\n    type: 'string',\n  })\n  content: string;\n\n  @Prop({\n    type: 'string',\n    descrition: '0:deleted, 1:active',\n    default: 0,\n  })\n  status: number;\n}\n\nexport type BlogCategoryType = BlogCategory & Document;\nexport const BlogCategorySchema = SchemaFactory.createForClass(BlogCategory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogCategoryController.html":{"url":"controllers/BlogCategoryController.html","title":"controller - BlogCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog-category/blog-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blog-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBlogCategoryDto: CreateBlogCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/blog-category/blog-category.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogCategoryDto\n                                            \n                                                            CreateBlogCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/blog-category/blog-category.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog-category/blog-category.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog-category/blog-category.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateBlogCategoryDto: UpdateBlogCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog-category/blog-category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBlogCategoryDto\n                                            \n                                                            UpdateBlogCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { BlogCategoryService } from './blog-category.service';\nimport { CreateBlogCategoryDto } from './dto/create-blog-category.dto';\nimport { UpdateBlogCategoryDto } from './dto/update-blog-category.dto';\n\n@Controller('blog-category')\nexport class BlogCategoryController {\n  constructor(private readonly blogCategoryService: BlogCategoryService) {} // BlogCategoryService\n\n  @Post()\n  create(@Body() createBlogCategoryDto: CreateBlogCategoryDto) {\n    return this.blogCategoryService.create(createBlogCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.blogCategoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.blogCategoryService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateBlogCategoryDto: UpdateBlogCategoryDto) {\n    return this.blogCategoryService.update(id, updateBlogCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.blogCategoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogCategoryModule.html":{"url":"modules/BlogCategoryModule.html","title":"module - BlogCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BlogCategoryModule\n\n\n\ncluster_BlogCategoryModule_providers\n\n\n\n\nBlogCategoryService\n\nBlogCategoryService\n\n\n\nBlogCategoryModule\n\nBlogCategoryModule\n\nBlogCategoryModule -->\n\nBlogCategoryService->BlogCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blog-category/blog-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogCategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BlogCategoryService } from './blog-category.service';\nimport { BlogCategoryController } from './blog-category.controller';\nimport { MongooseModule, Schema } from '@nestjs/mongoose';\nimport { BlogCategory, BlogCategorySchema } from './entities/blog-category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: BlogCategory.name, schema: BlogCategorySchema }]),\n  ],\n  controllers: [BlogCategoryController],\n  providers: [BlogCategoryService],\n})\nexport class BlogCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogCategoryService.html":{"url":"injectables/BlogCategoryService.html","title":"injectable - BlogCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog-category/blog-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(BlogCategoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/blog-category/blog-category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        BlogCategoryModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createBlogCategoryDto: CreateBlogCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog-category/blog-category.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogCategoryDto\n                                            \n                                                            CreateBlogCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog-category/blog-category.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog-category/blog-category.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog-category/blog-category.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateBlogCategoryDto: UpdateBlogCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog-category/blog-category.service.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBlogCategoryDto\n                                            \n                                                            UpdateBlogCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateBlogCategoryDto } from './dto/create-blog-category.dto';\nimport { UpdateBlogCategoryDto } from './dto/update-blog-category.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { BlogCategory, BlogCategoryType } from './entities/blog-category.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class BlogCategoryService {\n\n  constructor(\n    @InjectModel(BlogCategory.name)\n    private readonly BlogCategoryModel: Model,\n  ) {}\n  create(createBlogCategoryDto: CreateBlogCategoryDto) {\n    return this.BlogCategoryModel.create({\n      ...CreateBlogCategoryDto,\n    });\n  }\n\n  findAll() {\n    return this.BlogCategoryModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.BlogCategoryModel.findById(id);\n  }\n\n  update(id: string, updateBlogCategoryDto: UpdateBlogCategoryDto) {\n    return this.BlogCategoryModel.findByIdAndUpdate(id, {\n      ...UpdateBlogCategoryDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.BlogCategoryModel.deleteOne({_id: id});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/BlogController.html":{"url":"controllers/BlogController.html","title":"controller - BlogController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  BlogController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog/blog.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                blog\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createBlogDto: CreateBlogDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/blog/blog.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogDto\n                                            \n                                                            CreateBlogDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/blog/blog.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog/blog.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog/blog.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateBlogDto: UpdateBlogDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/blog/blog.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBlogDto\n                                            \n                                                            UpdateBlogDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { BlogService } from './blog.service';\nimport { CreateBlogDto } from './dto/create-blog.dto';\nimport { UpdateBlogDto } from './dto/update-blog.dto';\n\n@Controller('blog')\nexport class BlogController {\n  constructor(private readonly blogService: BlogService) {} // BlogService\n\n  @Post()\n  create(@Body() createBlogDto: CreateBlogDto) {\n    return this.blogService.create(createBlogDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.blogService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.blogService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateBlogDto: UpdateBlogDto) {\n    return this.blogService.update(id, updateBlogDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.blogService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/BlogModule.html":{"url":"modules/BlogModule.html","title":"module - BlogModule","body":"\n                   \n\n\n\n\n    Modules\n    BlogModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_BlogModule\n\n\n\ncluster_BlogModule_providers\n\n\n\n\nBlogService\n\nBlogService\n\n\n\nBlogModule\n\nBlogModule\n\nBlogModule -->\n\nBlogService->BlogModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/blog/blog.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            BlogService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            BlogController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { BlogService } from './blog.service';\nimport { BlogController } from './blog.controller';\nimport { MongooseModule, Schema } from '@nestjs/mongoose';\nimport { Blog, BlogSchema } from './entities/blog.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Blog.name, schema: BlogSchema }]),\n  ],\n  controllers: [BlogController],\n  providers: [BlogService],\n})\nexport class BlogModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BlogService.html":{"url":"injectables/BlogService.html","title":"injectable - BlogService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BlogService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog/blog.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(BlogModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/blog/blog.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        BlogModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createBlogDto: CreateBlogDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog/blog.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createBlogDto\n                                            \n                                                            CreateBlogDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog/blog.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog/blog.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog/blog.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateBlogDto: UpdateBlogDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/blog/blog.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateBlogDto\n                                            \n                                                            UpdateBlogDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateBlogDto } from './dto/create-blog.dto';\nimport { UpdateBlogDto } from './dto/update-blog.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Blog, BlogType } from './entities/blog.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class BlogService {\n  constructor(\n    @InjectModel(Blog.name)\n    private readonly BlogModel: Model,\n  ) {}\n  create(createBlogDto: CreateBlogDto) {\n    return this.BlogModel.create({\n      ...CreateBlogDto,\n    });\n  }\n\n  findAll() {\n    return this.BlogModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.BlogModel.findById(id);\n  }\n\n  update(id: string, updateBlogDto: UpdateBlogDto) {\n    return this.BlogModel.findByIdAndUpdate(id, {\n      ...UpdateBlogDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.BlogModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/entities/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class Category extends Document {\n  @Prop()\n  label: string;\n}\n\nexport type CategoryType = Category & Document;\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: any, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @Post()\n  create(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: any) {\n    return this.categoryService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: any, @Body() updateCategoryDto: UpdateCategoryDto) {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: any) {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Category, CategorySchema } from './entities/category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Category.name, schema: CategorySchema },\n    ])\n  ],\n  controllers: [CategoryController],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Category, CategoryType } from './entities/category.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectModel(Category.name)\n    private readonly categoryModel: Model,\n  ) {}\n\n  create(createCategoryDto: any) {\n    return this.categoryModel.create({ ...createCategoryDto, });\n  }\n\n  findAll() {\n    return this.categoryModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.categoryModel.findById(id);\n  }\n\n  update(id: string, updateCategoryDto: UpdateCategoryDto) {\n    return this.categoryModel.findByIdAndUpdate(id, {\n      ...UpdateCategoryDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.categoryModel.deleteOne({_id:id});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogCategoryDto.html":{"url":"classes/CreateBlogCategoryDto.html","title":"class - CreateBlogCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog-category/dto/create-blog-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateBlogCategoryDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateBlogDto.html":{"url":"classes/CreateBlogDto.html","title":"class - CreateBlogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateBlogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog/dto/create-blog.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateBlogDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCategoryDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFaqCategoryDto.html":{"url":"classes/CreateFaqCategoryDto.html","title":"class - CreateFaqCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFaqCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/dto/create-faq-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFaqCategoryDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFaqDto.html":{"url":"classes/CreateFaqDto.html","title":"class - CreateFaqDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFaqDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/dto/create-faq.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFaqDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/create-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateQuestionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Faq.html":{"url":"classes/Faq.html","title":"class - Faq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Faq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/entities/faq.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                            \n                                    \n                                    \n                                Category\n                            \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        Category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FaqCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { FaqCategory } from 'src/faq-category/entities/faq-category.entity';\nimport { Category } from './../../category/entities/category.entity';\nimport { Type } from 'class-transformer';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class Faq extends Document {\n  @Prop({\n    unique: true,\n  })\n  question: string;\n\n  @Prop()\n  answer: string;\n\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: FaqCategory.name,\n  })\n  @Type(() => FaqCategory)\n  Category: FaqCategory;\n}\n\nexport type FaqType = Faq & Document;\nexport const FaqSchema = SchemaFactory.createForClass(Faq);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FaqCategory.html":{"url":"classes/FaqCategory.html","title":"class - FaqCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FaqCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/entities/faq-category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq-category/entities/faq-category.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq-category/entities/faq-category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class FaqCategory extends Document {\n  @Prop({\n    unique: true,\n  })\n  label: string;\n  @Prop({\n    required: true,\n  })\n  description: string;\n}\n\nexport type FaqCategoryType = FaqCategory & Document;\nexport const FaqCategorySchema = SchemaFactory.createForClass(FaqCategory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FaqCategoryController.html":{"url":"controllers/FaqCategoryController.html","title":"controller - FaqCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FaqCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/faq-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                faq-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createFaqCategoryDto: CreateFaqCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqCategoryDto\n                                            \n                                                            CreateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: any, updateFaqCategoryDto: UpdateFaqCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqCategoryDto\n                                            \n                                                            UpdateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FaqCategoryService } from './faq-category.service';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\n\n@Controller('faq-category')\nexport class FaqCategoryController {\n  constructor(private readonly faqCategoryService: FaqCategoryService) {}\n\n  @Post()\n  create(@Body() createFaqCategoryDto: CreateFaqCategoryDto) {\n    return this.faqCategoryService.create(createFaqCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.faqCategoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: any) {\n    return this.faqCategoryService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: any, @Body() updateFaqCategoryDto: UpdateFaqCategoryDto) {\n    return this.faqCategoryService.update(id, updateFaqCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: any) {\n    return this.faqCategoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FaqCategoryModule.html":{"url":"modules/FaqCategoryModule.html","title":"module - FaqCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    FaqCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FaqCategoryModule\n\n\n\ncluster_FaqCategoryModule_providers\n\n\n\n\nFaqCategoryService\n\nFaqCategoryService\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nFaqCategoryModule -->\n\nFaqCategoryService->FaqCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/faq-category/faq-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FaqCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FaqCategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FaqCategoryService } from './faq-category.service';\nimport { FaqCategoryController } from './faq-category.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { FaqCategory, FaqCategorySchema } from './entities/faq-category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: FaqCategory.name, schema: FaqCategorySchema },\n    ]),\n  ],\n  controllers: [FaqCategoryController],\n  providers: [FaqCategoryService],\n})\nexport class FaqCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FaqCategoryService.html":{"url":"injectables/FaqCategoryService.html","title":"injectable - FaqCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FaqCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/faq-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                customMethod\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(FaqCategoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/faq-category/faq-category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        FaqCategoryModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFaqCategoryDto: CreateFaqCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqCategoryDto\n                                            \n                                                            CreateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customMethod\n                        \n                    \n                \n            \n            \n                \ncustomMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFaqCategoryDto: UpdateFaqCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqCategoryDto\n                                            \n                                                            UpdateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FaqCategory, FaqCategoryType } from './entities/faq-category.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FaqCategoryService {\n  constructor(\n    @InjectModel(FaqCategory.name)\n    private readonly FaqCategoryModel: Model,\n  ) {}\n  create(createFaqCategoryDto: CreateFaqCategoryDto) {\n    return this.FaqCategoryModel.create({\n      ...createFaqCategoryDto,\n    });\n  }\n\n  findAll() {\n    return this.FaqCategoryModel.find({});\n  }\n\n  customMethod() {\n    return `This action returns all custom method`;\n  }\n\n  findOne(id: string) {\n    return this.FaqCategoryModel.findById(id);\n  }\n\n  update(id: string, updateFaqCategoryDto: UpdateFaqCategoryDto) {\n    return this.FaqCategoryModel.findByIdAndUpdate(id, {\n      ...UpdateFaqCategoryDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.FaqCategoryModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FaqController.html":{"url":"controllers/FaqController.html","title":"controller - FaqController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FaqController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/faq.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                faq\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createFaqDto: CreateFaqDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqDto\n                                            \n                                                            CreateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: any, updateFaqDto: UpdateFaqDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqDto\n                                            \n                                                            UpdateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FaqService } from './faq.service';\nimport { CreateFaqDto } from './dto/create-faq.dto';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\n\n@Controller('faq')\nexport class FaqController {\n  constructor(private readonly faqService: FaqService) {}\n\n  @Post()\n  create(@Body() createFaqDto: CreateFaqDto) {\n    return this.faqService.create(createFaqDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.faqService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: any) {\n    return this.faqService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: any, @Body() updateFaqDto: UpdateFaqDto) {\n    return this.faqService.update(id, updateFaqDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: any) {\n    return this.faqService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FaqModule.html":{"url":"modules/FaqModule.html","title":"module - FaqModule","body":"\n                   \n\n\n\n\n    Modules\n    FaqModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FaqModule\n\n\n\ncluster_FaqModule_providers\n\n\n\n\nFaqService\n\nFaqService\n\n\n\nFaqModule\n\nFaqModule\n\nFaqModule -->\n\nFaqService->FaqModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/faq/faq.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FaqService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FaqController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FaqService } from './faq.service';\nimport { FaqController } from './faq.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Faq, FaqSchema } from './entities/faq.entity';\nimport { FaqCategory, FaqCategorySchema } from 'src/faq-category/entities/faq-category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      {name: Faq.name, schema: FaqSchema},\n      {name: FaqCategory.name, schema: FaqCategorySchema},\n    ])\n  ],\n  controllers: [FaqController],\n  providers: [FaqService],\n})\nexport class FaqModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FaqService.html":{"url":"injectables/FaqService.html","title":"injectable - FaqService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FaqService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/faq.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(faqModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/faq/faq.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        faqModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFaqDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFaqDto: UpdateFaqDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqDto\n                                            \n                                                            UpdateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFaqDto } from './dto/create-faq.dto';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Faq, FaqType } from './entities/faq.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FaqService {\n  constructor(\n    @InjectModel(Faq.name)\n    private readonly faqModel: Model,\n  ) {}\n  create(createFaqDto: any) {\n    return this.faqModel.create({\n      ...createFaqDto,\n    });\n  }\n\n  findAll() {\n    return this.faqModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.faqModel.findById(id);\n  }\n\n  update(id: string, updateFaqDto: UpdateFaqDto) {\n    return this.faqModel.findByIdAndUpdate(id, {\n      ...UpdateFaqDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.faqModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IErrorBody.html":{"url":"interfaces/IErrorBody.html","title":"interface - IErrorBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IErrorBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            instance\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            validationErrors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instance:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validationErrors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validationErrors:         ValidationErrors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n    readonly [type: string]: {\n      readonly [type: string]: string;\n    };\n  };\n  \n  export interface IErrorBody {\n    readonly type?: string;\n    readonly title: string;\n    readonly status: number;\n    readonly detail?: string;\n    readonly instance?: string;\n    readonly validationErrors?: ValidationErrors;\n  }\n  \n  export interface PaginationMetaInterface {\n    readonly itemCount: number;\n    readonly totalItems: number;\n    readonly itemsPerPage: number;\n    readonly totalPages: number;\n    readonly currentPage: number;\n    readonly firstPageUrl?: string;\n    readonly lastPageUrl?: string;\n    readonly nextPageUrl?: string;\n    readonly previousPageUrl?: string;\n  }\n  \n  export interface ResourceBody {\n    readonly data: T;\n  }\n  \n  export interface ItemsBody {\n    readonly items: T;\n  }\n  \n  export type ISuccessBody = ResourceBody | ItemsBody;\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ItemsBody.html":{"url":"interfaces/ItemsBody.html","title":"interface - ItemsBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ItemsBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n    readonly [type: string]: {\n      readonly [type: string]: string;\n    };\n  };\n  \n  export interface IErrorBody {\n    readonly type?: string;\n    readonly title: string;\n    readonly status: number;\n    readonly detail?: string;\n    readonly instance?: string;\n    readonly validationErrors?: ValidationErrors;\n  }\n  \n  export interface PaginationMetaInterface {\n    readonly itemCount: number;\n    readonly totalItems: number;\n    readonly itemsPerPage: number;\n    readonly totalPages: number;\n    readonly currentPage: number;\n    readonly firstPageUrl?: string;\n    readonly lastPageUrl?: string;\n    readonly nextPageUrl?: string;\n    readonly previousPageUrl?: string;\n  }\n  \n  export interface ResourceBody {\n    readonly data: T;\n  }\n  \n  export interface ItemsBody {\n    readonly items: T;\n  }\n  \n  export type ISuccessBody = ResourceBody | ItemsBody;\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStorage.html":{"url":"classes/JwtStorage.html","title":"class - JwtStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/storage/jwt.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TokenStorage\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                TOKEN_EXPIRY\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                TOKEN_TYPE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/storage/jwt.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        TOKEN_EXPIRY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '7 days'\n                    \n                \n                    \n                        \n                                Defined in src/auth/storage/jwt.storage.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        TOKEN_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authentication'\n                    \n                \n                    \n                        \n                                Defined in src/auth/storage/jwt.storage.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/storage/jwt.storage.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/storage/jwt.storage.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { User, UserType } from '../../user/entities/user.entity';\nimport { TokenStorage } from './token.storage';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Inject } from '@nestjs/common';\n// interface TokenBody {\n//   readonly type: string;\n//   readonly sub: string;\n// }\nexport class JwtStorage implements TokenStorage {\n  private static readonly TOKEN_EXPIRY = '7 days';\n  private static readonly TOKEN_TYPE = 'authentication';\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n    @Inject(JwtService)\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async generateToken(user: any) {\n    return this.jwtService.signAsync(user, {\n      expiresIn: JwtStorage.TOKEN_EXPIRY,\n      secret: 'forumadminsecret',\n    });\n  }\n  public async validateToken(token: string): Promise {\n    const tokenBody: any = await this.jwtService.verifyAsync(token);\n    if (tokenBody.type !== JwtStorage.TOKEN_TYPE) {\n      throw new Error('Invalid token');\n    }\n\n    console.log(tokenBody);\n\n    return this.userModel.findOne({ where: { id: tokenBody.sub } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: 'forumadminsecret',\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      _id: payload._id,\n      email: payload.email,\n      // firstName: payload.firstName,\n      // lastName: payload.lastName,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStrategy.html":{"url":"classes/LocalStrategy.html","title":"class - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserType } from '../../user/entities/user.entity';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { UnauthorizedException } from \"@nestjs/common\";\n\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    console.log(username);\n    const user = await this.userModel.findOne({\n      email: username,\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid email supplied');\n    }\n\n    if (await bcrypt.compare(password, user.password)) {\n      return user;\n    }\n\n    throw new UnauthorizedException('Invalid password supplied');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMetaInterface.html":{"url":"interfaces/PaginationMetaInterface.html","title":"interface - PaginationMetaInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMetaInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentPage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            firstPageUrl\n                                        \n                                \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            itemsPerPage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastPageUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nextPageUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            previousPageUrl\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n    readonly [type: string]: {\n      readonly [type: string]: string;\n    };\n  };\n  \n  export interface IErrorBody {\n    readonly type?: string;\n    readonly title: string;\n    readonly status: number;\n    readonly detail?: string;\n    readonly instance?: string;\n    readonly validationErrors?: ValidationErrors;\n  }\n  \n  export interface PaginationMetaInterface {\n    readonly itemCount: number;\n    readonly totalItems: number;\n    readonly itemsPerPage: number;\n    readonly totalPages: number;\n    readonly currentPage: number;\n    readonly firstPageUrl?: string;\n    readonly lastPageUrl?: string;\n    readonly nextPageUrl?: string;\n    readonly previousPageUrl?: string;\n  }\n  \n  export interface ResourceBody {\n    readonly data: T;\n  }\n  \n  export interface ItemsBody {\n    readonly items: T;\n  }\n  \n  export type ISuccessBody = ResourceBody | ItemsBody;\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/entities/question.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuestionDto\n                                            \n                                                            CreateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: any, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQuestionDto\n                                            \n                                                            UpdateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Controller('question')\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  create(@Body() createQuestionDto: CreateQuestionDto) {\n    return this.questionService.create(createQuestionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.questionService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: any) {\n    return this.questionService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: any, @Body() updateQuestionDto: UpdateQuestionDto) {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: any) {\n    return this.questionService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_providers\n\n\n\ncluster_QuestionModule_exports\n\n\n\n\nQuestionService \n\nQuestionService \n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question/question.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { QuestionController } from './question.controller';\n\n@Module({\n  controllers: [QuestionController],\n  providers: [QuestionService],\n  exports: [QuestionService]\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createQuestionDto: CreateQuestionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuestionDto\n                                            \n                                                            CreateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQuestionDto\n                                            \n                                                            UpdateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Injectable()\nexport class QuestionService {\n  create(createQuestionDto: CreateQuestionDto) {\n    return 'This action adds a new question';\n  }\n\n  findAll() {\n    return `This action returns all question`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} question`;\n  }\n\n  update(id: number, updateQuestionDto: UpdateQuestionDto) {\n    return `This action updates a #${id} question`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} question`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResourceBody.html":{"url":"interfaces/ResourceBody.html","title":"interface - ResourceBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResourceBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n    readonly [type: string]: {\n      readonly [type: string]: string;\n    };\n  };\n  \n  export interface IErrorBody {\n    readonly type?: string;\n    readonly title: string;\n    readonly status: number;\n    readonly detail?: string;\n    readonly instance?: string;\n    readonly validationErrors?: ValidationErrors;\n  }\n  \n  export interface PaginationMetaInterface {\n    readonly itemCount: number;\n    readonly totalItems: number;\n    readonly itemsPerPage: number;\n    readonly totalPages: number;\n    readonly currentPage: number;\n    readonly firstPageUrl?: string;\n    readonly lastPageUrl?: string;\n    readonly nextPageUrl?: string;\n    readonly previousPageUrl?: string;\n  }\n  \n  export interface ResourceBody {\n    readonly data: T;\n  }\n  \n  export interface ItemsBody {\n    readonly items: T;\n  }\n  \n  export type ISuccessBody = ResourceBody | ItemsBody;\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseTransformInterceptor.html":{"url":"injectables/ResponseTransformInterceptor.html","title":"injectable - ResponseTransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseTransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interceptors/response-transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/interceptors/response-transform.interceptor.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n  } from '@nestjs/common';\n  import { Observable } from 'rxjs';\n  import { map } from 'rxjs/operators';\n  import { ISuccessBody } from '../response/types';\n  import { ResponseMessageKey } from '../decorators/response.decorator';\n  import { Reflector } from '@nestjs/core';\n  \n  const IgnoredPropertyName = Symbol('IgnoredPropertyName');\n  \n  export function ResponseTransformInterceptorIgnore() {\n    return function (\n      target,\n      propertyKey: string,\n      descriptor: PropertyDescriptor,\n    ) {\n      descriptor.value[IgnoredPropertyName] = true;\n    };\n  }\n  \n  @Injectable()\n  export class ResponseTransformInterceptor\n    implements NestInterceptor | null>\n  {\n    intercept(\n      context: ExecutionContext,\n      next: CallHandler,\n    ): Observable | null> {\n      const responseMessage =\n        new Reflector().get(ResponseMessageKey, context.getHandler()) ??\n        '';\n      const isIgnored = context.getHandler()[IgnoredPropertyName];\n      if (!!isIgnored) {\n        return next.handle().pipe(map((data) => data));\n      }\n  \n      return next.handle().pipe(\n        map((data: ISuccessBody | undefined) => {\n          if (data === undefined) {\n            return null;\n          }\n  \n          if (data.hasOwnProperty('items')) {\n            return data;\n          }\n  \n          return {\n            statusCode: context.switchToHttp().getResponse().statusCode,\n            reqId: context.switchToHttp().getRequest().reqId,\n            message: responseMessage ?? '',\n            data,\n          };\n        }),\n      );\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignUpDTO.html":{"url":"interfaces/SignUpDTO.html","title":"interface - SignUpDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignUpDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SignUpDTO {\n    firstName: string,\n    lastName: string,\n    username: string,\n    password: string,\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenGuard.html":{"url":"injectables/TokenGuard.html","title":"injectable - TokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n    CanActivate,\n    ExecutionContext,\n    HttpCode,\n    HttpException,\n    HttpStatus,\n    Injectable,\n    UnauthorizedException,\n  } from '@nestjs/common';\n  import { AuthGuard } from '@nestjs/passport';\n  import { Observable } from 'rxjs';\n  \n  @Injectable()\n  export class TokenGuard extends AuthGuard('jwt') {\n    handleRequest(err, user, info: any) {\n      if (info) {\n        throw new HttpException(\n          {\n            message: 'Token expired',\n            messageCode: 'TOKEN_EXPIRED',\n            statusCode: 403,\n          },\n          HttpStatus.FORBIDDEN,\n        );\n      }\n      if (err || !user) throw err || new UnauthorizedException();\n  \n      return user;\n    }\n  }\n  \n  @Injectable()\n  export class AuthCheckGuard extends AuthGuard('jwt') {\n    handleRequest(err, user, info: any) {\n      return user;\n    }\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenStorage.html":{"url":"interfaces/TokenStorage.html","title":"interface - TokenStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/storage/token.storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generateToken\n                                        \n                                \n                                \n                                        \n                                            validateToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenStorage {\n    readonly generateToken: (user: any) => Promise;\n    readonly validateToken: (token: string) => Promise;\n  }\n  \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBlogCategoryDto.html":{"url":"classes/UpdateBlogCategoryDto.html","title":"class - UpdateBlogCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBlogCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog-category/dto/update-blog-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateBlogCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateBlogCategoryDto } from './create-blog-category.dto';\n\nexport class UpdateBlogCategoryDto extends PartialType(CreateBlogCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateBlogDto.html":{"url":"classes/UpdateBlogDto.html","title":"class - UpdateBlogDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateBlogDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/blog/dto/update-blog.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateBlogDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateBlogDto } from './create-blog.dto';\n\nexport class UpdateBlogDto extends PartialType(CreateBlogDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFaqCategoryDto.html":{"url":"classes/UpdateFaqCategoryDto.html","title":"class - UpdateFaqCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFaqCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/dto/update-faq-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFaqCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFaqCategoryDto } from './create-faq-category.dto';\n\nexport class UpdateFaqCategoryDto extends PartialType(CreateFaqCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFaqDto.html":{"url":"classes/UpdateFaqDto.html","title":"class - UpdateFaqDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFaqDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/dto/update-faq.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFaqDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFaqDto } from './create-faq.dto';\n\nexport class UpdateFaqDto extends PartialType(CreateFaqDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/update-question.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateQuestionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string', descrition: '0:deleted, 1:active', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Exclude } from 'class-transformer';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class User extends Document {\n  @Prop()\n  firstName: string;\n\n  @Prop({\n    type: 'string',\n  })\n  lastName: string;\n\n  @Prop({\n    type: 'string',\n    unique: true,\n  })\n  email: string;\n\n  @Prop({\n    type: 'string',\n  })\n  @Exclude()\n  password: string;\n\n  @Prop({\n    type: 'string',\n    descrition: '0:deleted, 1:active',\n    default: 0,\n  })\n  status: number;\n}\nexport type UserType = User & Document;\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nQuestionModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QuestionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './entities/user.entity';\nimport { QuestionModule } from 'src/question/question.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    QuestionModule,\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                customMethod\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customMethod\n                        \n                    \n                \n            \n            \n                \ncustomMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { User, UserType } from './entities/user.entity';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n  create(createUserDto: any) {\n    return this.userModel.create({\n      firstName: createUserDto.firstName,\n      lastName: createUserDto.lastName,\n      status: createUserDto.status,\n    });\n  }\n\n  findAll() {\n    return this.userModel.find({});\n  }\n\n  customMethod() {\n    return `This action returns all custom method`;\n  }\n\n  findOne(id: string) {\n    return this.userModel.findById(id);\n  }\n\n  update(id: string, updateUserDto: UpdateUserDto) {\n    return this.userModel.findByIdAndUpdate(id, { ...UpdateUserDto });\n  }\n\n  remove(id: string) {\n    return this.userModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/decorators/response.decorator.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/response.decorator.ts\n            \n            variable\n            ResponseMessageKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/auth.dto.ts\n            \n            interface\n            SignUpDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/token.guard.ts\n            \n            injectable\n            AuthCheckGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/token.guard.ts\n            \n            injectable\n            TokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interceptors/response-transform.interceptor.ts\n            \n            injectable\n            ResponseTransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interceptors/response-transform.interceptor.ts\n            \n            function\n            ResponseTransformInterceptorIgnore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interceptors/response-transform.interceptor.ts\n            \n            variable\n            IgnoredPropertyName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/token-storage.provider.ts\n            \n            variable\n            TokenStorageProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/response/types.ts\n            \n            interface\n            IErrorBody\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/response/types.ts\n            \n            interface\n            ItemsBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/response/types.ts\n            \n            interface\n            PaginationMetaInterface\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/response/types.ts\n            \n            interface\n            ResourceBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/storage/jwt.storage.ts\n            \n            class\n            JwtStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/storage/token.storage.ts\n            \n            interface\n            TokenStorage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local.strategy.ts\n            \n            class\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/blog-category/blog-category.controller.ts\n            \n            controller\n            BlogCategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/blog-category/blog-category.service.ts\n            \n            injectable\n            BlogCategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/blog-category/dto/create-blog-category.dto.ts\n            \n            class\n            CreateBlogCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blog-category/dto/update-blog-category.dto.ts\n            \n            class\n            UpdateBlogCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blog-category/entities/blog-category.entity.ts\n            \n            class\n            BlogCategory\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/blog-category/entities/blog-category.entity.ts\n            \n            variable\n            BlogCategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blog/blog.controller.ts\n            \n            controller\n            BlogController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/blog/blog.service.ts\n            \n            injectable\n            BlogService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/blog/dto/create-blog.dto.ts\n            \n            class\n            CreateBlogDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blog/dto/update-blog.dto.ts\n            \n            class\n            UpdateBlogDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/blog/entities/blog.entity.ts\n            \n            class\n            Blog\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/blog/entities/blog.entity.ts\n            \n            variable\n            BlogSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            variable\n            CategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/dto/create-faq-category.dto.ts\n            \n            class\n            CreateFaqCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/dto/update-faq-category.dto.ts\n            \n            class\n            UpdateFaqCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/entities/faq-category.entity.ts\n            \n            class\n            FaqCategory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/faq-category/entities/faq-category.entity.ts\n            \n            variable\n            FaqCategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/faq-category.controller.ts\n            \n            controller\n            FaqCategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/faq-category/faq-category.service.ts\n            \n            injectable\n            FaqCategoryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/faq/dto/create-faq.dto.ts\n            \n            class\n            CreateFaqDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/dto/update-faq.dto.ts\n            \n            class\n            UpdateFaqDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/entities/faq.entity.ts\n            \n            class\n            Faq\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/faq/entities/faq.entity.ts\n            \n            variable\n            FaqSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/faq.controller.ts\n            \n            controller\n            FaqController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/faq/faq.service.ts\n            \n            injectable\n            FaqService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.1.1\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.2.8\n        \n            @nestjs/swagger : ^7.1.16\n        \n            @nestjs/websockets : ^10.2.8\n        \n            @types/bcrypt : ^5.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            moment : ^2.29.4\n        \n            mongodb : ^6.2.0\n        \n            mongoose : ^8.0.0\n        \n            mongoose-autopopulate : ^1.1.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            ResponseTransformInterceptorIgnore   (src/.../response-transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/auth/interceptors/response-transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseTransformInterceptorIgnore\n                        \n                    \n                \n            \n            \n                \nResponseTransformInterceptorIgnore()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        BlogModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FaqCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FaqModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_BlogCategoryModule\n\n\n\ncluster_BlogCategoryModule_providers\n\n\n\ncluster_BlogModule\n\n\n\ncluster_BlogModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_FaqCategoryModule\n\n\n\ncluster_FaqCategoryModule_providers\n\n\n\ncluster_FaqModule\n\n\n\ncluster_FaqModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nBlogCategoryModule\n\nBlogCategoryModule\n\nAppModule -->\n\nBlogCategoryModule->AppModule\n\n\n\n\n\nBlogModule\n\nBlogModule\n\nAppModule -->\n\nBlogModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nAppModule -->\n\nFaqCategoryModule->AppModule\n\n\n\n\n\nFaqModule\n\nFaqModule\n\nAppModule -->\n\nFaqModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nQuestionModule->UserModule\n\n\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthModule -->\n\nUserService->AuthModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nBlogCategoryService\n\nBlogCategoryService\n\nBlogCategoryModule -->\n\nBlogCategoryService->BlogCategoryModule\n\n\n\n\n\nBlogService\n\nBlogService\n\nBlogModule -->\n\nBlogService->BlogModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nFaqCategoryService\n\nFaqCategoryService\n\nFaqCategoryModule -->\n\nFaqCategoryService->FaqCategoryModule\n\n\n\n\n\nFaqService\n\nFaqService\n\nFaqModule -->\n\nFaqService->FaqModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    9 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogCategoryType   (src/.../blog-category.entity.ts)\n                        \n                        \n                            BlogType   (src/.../blog.entity.ts)\n                        \n                        \n                            CategoryType   (src/.../category.entity.ts)\n                        \n                        \n                            FaqCategoryType   (src/.../faq-category.entity.ts)\n                        \n                        \n                            FaqType   (src/.../faq.entity.ts)\n                        \n                        \n                            ISuccessBody   (src/.../types.ts)\n                        \n                        \n                            UserType   (src/.../user.entity.ts)\n                        \n                        \n                            ValidationErrors   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/blog-category/entities/blog-category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    BlogCategoryType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/blog/entities/blog.entity.ts\n    \n    \n        \n            \n                \n                    \n                    BlogType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/category/entities/category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CategoryType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/faq-category/entities/faq-category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FaqCategoryType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/faq/entities/faq.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FaqType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/auth/response/types.ts\n    \n    \n        \n            \n                \n                    \n                    ISuccessBody\n                \n            \n            \n                \n                        ResourceBody | ItemsBody\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidationErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BlogCategorySchema   (src/.../blog-category.entity.ts)\n                        \n                        \n                            BlogSchema   (src/.../blog.entity.ts)\n                        \n                        \n                            CategorySchema   (src/.../category.entity.ts)\n                        \n                        \n                            FaqCategorySchema   (src/.../faq-category.entity.ts)\n                        \n                        \n                            FaqSchema   (src/.../faq.entity.ts)\n                        \n                        \n                            IgnoredPropertyName   (src/.../response-transform.interceptor.ts)\n                        \n                        \n                            ResponseMessage   (src/.../response.decorator.ts)\n                        \n                        \n                            ResponseMessageKey   (src/.../response.decorator.ts)\n                        \n                        \n                            TokenStorageProvider   (src/.../token-storage.provider.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/blog-category/entities/blog-category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogCategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(BlogCategory)\n                    \n                \n\n\n        \n    \n\n    src/blog/entities/blog.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BlogSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Blog)\n                    \n                \n\n\n        \n    \n\n    src/category/entities/category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Category)\n                    \n                \n\n\n        \n    \n\n    src/faq-category/entities/faq-category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FaqCategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(FaqCategory)\n                    \n                \n\n\n        \n    \n\n    src/faq/entities/faq.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FaqSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Faq)\n                    \n                \n\n\n        \n    \n\n    src/auth/interceptors/response-transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IgnoredPropertyName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('IgnoredPropertyName')\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n  SetMetadata(ResponseMessageKey, message)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ResponseMessageKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ResponseMessageKey'\n                    \n                \n\n\n        \n    \n\n    src/auth/providers/token-storage.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TokenStorageProvider\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  provide: 'TokenStorage',\n  useClass: JwtStorage,\n} as Provider\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
